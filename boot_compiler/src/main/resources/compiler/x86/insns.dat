;# Conventional instructions
AAA		void				[	37]					8086,NOLONG
AAD		void				[	d5 0a]					8086,NOLONG
AAD		imm				[i:	d5 ib,u]				8086,SB,NOLONG
AAM		void				[	d4 0a]					8086,NOLONG
AAM		imm				[i:	d4 ib,u]				8086,SB,NOLONG
AAS		void				[	3f]					8086,NOLONG
ADC		mem,reg8			[mr:	hle 10 /r]				8086,SM,LOCK
ADC		reg8,reg8			[mr:	10 /r]					8086
ADC		mem,reg16			[mr:	hle o16 11 /r]				8086,SM,LOCK
ADC		reg16,reg16			[mr:	o16 11 /r]				8086
ADC		mem,reg32			[mr:	hle o32 11 /r]				386,SM,LOCK
ADC		reg32,reg32			[mr:	o32 11 /r]				386
ADC		mem,reg64			[mr:	hle o64 11 /r]				X64,SM,LOCK
ADC		reg64,reg64			[mr:	o64 11 /r]				X64
ADC		reg8,mem			[rm:	12 /r]					8086,SM
ADC		reg8,reg8			[rm:	12 /r]					8086
ADC		reg16,mem			[rm:	o16 13 /r]				8086,SM
ADC		reg16,reg16			[rm:	o16 13 /r]				8086
ADC		reg32,mem			[rm:	o32 13 /r]				386,SM
ADC		reg32,reg32			[rm:	o32 13 /r]				386
ADC		reg64,mem			[rm:	o64 13 /r]				X64,SM
ADC		reg64,reg64			[rm:	o64 13 /r]				X64
ADC		rm16,imm8			[mi:	hle o16 83 /2 ib,s]			8086,LOCK
ADC		rm32,imm8			[mi:	hle o32 83 /2 ib,s]			386,LOCK
ADC		rm64,imm8			[mi:	hle o64 83 /2 ib,s]			X64,LOCK
ADC		reg_al,imm			[-i:	14 ib]					8086,SM
ADC		reg_ax,sbyteword		[mi:	o16 83 /2 ib,s]				8086,SM,ND
ADC		reg_ax,imm			[-i:	o16 15 iw]				8086,SM
ADC		reg_eax,sbytedword		[mi:	o32 83 /2 ib,s]				386,SM,ND
ADC		reg_eax,imm			[-i:	o32 15 id]				386,SM
ADC		reg_rax,sbytedword		[mi:	o64 83 /2 ib,s]				X64,SM,ND
ADC		reg_rax,imm			[-i:	o64 15 id,s]				X64,SM
ADC		rm8,imm				[mi:	hle 80 /2 ib]				8086,SM,LOCK
ADC		rm16,sbyteword			[mi:	hle o16 83 /2 ib,s]			8086,SM,LOCK,ND
ADC		rm16,imm			[mi:	hle o16 81 /2 iw]			8086,SM,LOCK
ADC		rm32,sbytedword			[mi:	hle o32 83 /2 ib,s]			386,SM,LOCK,ND
ADC		rm32,imm			[mi:	hle o32 81 /2 id]			386,SM,LOCK
ADC		rm64,sbytedword			[mi:	hle o64 83 /2 ib,s]			X64,SM,LOCK,ND
ADC		rm64,imm			[mi:	hle o64 81 /2 id,s]			X64,SM,LOCK
ADC		mem,imm8			[mi:	hle 80 /2 ib]				8086,SM,LOCK,ND
ADC		mem,sbyteword16			[mi:	hle o16 83 /2 ib,s]			8086,SM,LOCK,ND
ADC		mem,imm16			[mi:	hle o16 81 /2 iw]			8086,SM,LOCK
ADC		mem,sbytedword32		[mi:	hle o32 83 /2 ib,s]			386,SM,LOCK,ND
ADC		mem,imm32			[mi:	hle o32 81 /2 id]			386,SM,LOCK
ADC		rm8,imm				[mi:	hle 82 /2 ib]				8086,SM,LOCK,ND,NOLONG
ADD		mem,reg8			[mr:	hle 00 /r]				8086,SM,LOCK
ADD		reg8,reg8			[mr:	00 /r]					8086
ADD		mem,reg16			[mr:	hle o16 01 /r]				8086,SM,LOCK
ADD		reg16,reg16			[mr:	o16 01 /r]				8086
ADD		mem,reg32			[mr:	hle o32 01 /r]				386,SM,LOCK
ADD		reg32,reg32			[mr:	o32 01 /r]				386
ADD		mem,reg64			[mr:	hle o64 01 /r]				X64,SM,LOCK
ADD		reg64,reg64			[mr:	o64 01 /r]				X64
ADD		reg8,mem			[rm:	02 /r]					8086,SM
ADD		reg8,reg8			[rm:	02 /r]					8086
ADD		reg16,mem			[rm:	o16 03 /r]				8086,SM
ADD		reg16,reg16			[rm:	o16 03 /r]				8086
ADD		reg32,mem			[rm:	o32 03 /r]				386,SM
ADD		reg32,reg32			[rm:	o32 03 /r]				386
ADD		reg64,mem			[rm:	o64 03 /r]				X64,SM
ADD		reg64,reg64			[rm:	o64 03 /r]				X64
ADD		rm16,imm8			[mi:	hle o16 83 /0 ib,s]			8086,LOCK
ADD		rm32,imm8			[mi:	hle o32 83 /0 ib,s]			386,LOCK
ADD		rm64,imm8			[mi:	hle o64 83 /0 ib,s]			X64,LOCK
ADD		reg_al,imm			[-i:	04 ib]					8086,SM
ADD		reg_ax,sbyteword		[mi:	o16 83 /0 ib,s]				8086,SM,ND
ADD		reg_ax,imm			[-i:	o16 05 iw]				8086,SM
ADD		reg_eax,sbytedword		[mi:	o32 83 /0 ib,s]				386,SM,ND
ADD		reg_eax,imm			[-i:	o32 05 id]				386,SM
ADD		reg_rax,sbytedword		[mi:	o64 83 /0 ib,s]				X64,SM,ND
ADD		reg_rax,imm			[-i:	o64 05 id,s]				X64,SM
ADD		rm8,imm				[mi:	hle 80 /0 ib]				8086,SM,LOCK
ADD		rm16,sbyteword			[mi:	hle o16 83 /0 ib,s]			8086,SM,LOCK,ND
ADD		rm16,imm			[mi:	hle o16 81 /0 iw]			8086,SM,LOCK
ADD		rm32,sbytedword			[mi:	hle o32 83 /0 ib,s]			386,SM,LOCK,ND
ADD		rm32,imm			[mi:	hle o32 81 /0 id]			386,SM,LOCK
ADD		rm64,sbytedword			[mi:	hle o64 83 /0 ib,s]			X64,SM,LOCK,ND
ADD		rm64,imm			[mi:	hle o64 81 /0 id,s]			X64,SM,LOCK
ADD		mem,imm8			[mi:	hle 80 /0 ib]				8086,SM,LOCK
ADD		mem,sbyteword16			[mi:	hle o16 83 /0 ib,s]			8086,SM,LOCK,ND
ADD		mem,imm16			[mi:	hle o16 81 /0 iw]			8086,SM,LOCK
ADD		mem,sbytedword32		[mi:	hle o32 83 /0 ib,s]			386,SM,LOCK,ND
ADD		mem,imm32			[mi:	hle o32 81 /0 id]			386,SM,LOCK
ADD		rm8,imm				[mi:	hle 82 /0 ib]				8086,SM,LOCK,ND,NOLONG
AND		mem,reg8			[mr:	hle 20 /r]				8086,SM,LOCK
AND		reg8,reg8			[mr:	20 /r]					8086
AND		mem,reg16			[mr:	hle o16 21 /r]				8086,SM,LOCK
AND		reg16,reg16			[mr:	o16 21 /r]				8086
AND		mem,reg32			[mr:	hle o32 21 /r]				386,SM,LOCK
AND		reg32,reg32			[mr:	o32 21 /r]				386
AND		mem,reg64			[mr:	hle o64 21 /r]				X64,SM,LOCK
AND		reg64,reg64			[mr:	o64 21 /r]				X64
AND		reg8,mem			[rm:	22 /r]					8086,SM
AND		reg8,reg8			[rm:	22 /r]					8086
AND		reg16,mem			[rm:	o16 23 /r]				8086,SM
AND		reg16,reg16			[rm:	o16 23 /r]				8086
AND		reg32,mem			[rm:	o32 23 /r]				386,SM
AND		reg32,reg32			[rm:	o32 23 /r]				386
AND		reg64,mem			[rm:	o64 23 /r]				X64,SM
AND		reg64,reg64			[rm:	o64 23 /r]				X64
AND		rm16,imm8			[mi:	hle o16 83 /4 ib,s]			8086,LOCK
AND		rm32,imm8			[mi:	hle o32 83 /4 ib,s]			386,LOCK
AND		rm64,imm8			[mi:	hle o64 83 /4 ib,s]			X64,LOCK
AND		reg_al,imm			[-i:	24 ib]					8086,SM
AND		reg_ax,sbyteword		[mi:	o16 83 /4 ib,s]				8086,SM,ND
AND		reg_ax,imm			[-i:	o16 25 iw]				8086,SM
AND		reg_eax,sbytedword		[mi:	o32 83 /4 ib,s]				386,SM,ND
AND		reg_eax,imm			[-i:	o32 25 id]				386,SM
AND		reg_rax,sbytedword		[mi:	o64 83 /4 ib,s]				X64,SM,ND
AND		reg_rax,imm			[-i:	o64 25 id,s]				X64,SM
AND		rm8,imm				[mi:	hle 80 /4 ib]				8086,SM,LOCK
AND		rm16,sbyteword			[mi:	hle o16 83 /4 ib,s]			8086,SM,LOCK,ND
AND		rm16,imm			[mi:	hle o16 81 /4 iw]			8086,SM,LOCK
AND		rm32,sbytedword			[mi:	hle o32 83 /4 ib,s]			386,SM,LOCK,ND
AND		rm32,imm			[mi:	hle o32 81 /4 id]			386,SM,LOCK
AND		rm64,sbytedword			[mi:	hle o64 83 /4 ib,s]			X64,SM,LOCK,ND
AND		rm64,imm			[mi:	hle o64 81 /4 id,s]			X64,SM,LOCK
AND		mem,imm8			[mi:	hle 80 /4 ib]				8086,SM,LOCK
AND		mem,sbyteword16			[mi:	hle o16 83 /4 ib,s]			8086,SM,LOCK,ND
AND		mem,imm16			[mi:	hle o16 81 /4 iw]			8086,SM,LOCK
AND		mem,sbytedword32		[mi:	hle o32 83 /4 ib,s]			386,SM,LOCK,ND
AND		mem,imm32			[mi:	hle o32 81 /4 id]			386,SM,LOCK
AND		rm8,imm				[mi:	hle 82 /4 ib]				8086,SM,LOCK,ND,NOLONG
ARPL		mem,reg16			[mr:	63 /r]					286,PROT,SM,NOLONG
ARPL		reg16,reg16			[mr:	63 /r]					286,PROT,NOLONG
BB0_RESET	void				[	0f 3a]					PENT,CYRIX,ND,OBSOLETE
BB1_RESET	void				[	0f 3b]					PENT,CYRIX,ND,OBSOLETE
BOUND		reg16,mem			[rm:	o16 62 /r]				186,NOLONG
BOUND		reg32,mem			[rm:	o32 62 /r]				386,NOLONG
BSF		reg16,mem			[rm:	o16 nof3 0f bc /r]			386,SM
BSF		reg16,reg16			[rm:	o16 nof3 0f bc /r]			386
BSF		reg32,mem			[rm:	o32 nof3 0f bc /r]			386,SM
BSF		reg32,reg32			[rm:	o32 nof3 0f bc /r]			386
BSF		reg64,mem			[rm:	o64 nof3 0f bc /r]			X64,SM
BSF		reg64,reg64			[rm:	o64 nof3 0f bc /r]			X64
BSR		reg16,mem			[rm:	o16 nof3 0f bd /r]			386,SM
BSR		reg16,reg16			[rm:	o16 nof3 0f bd /r]			386
BSR		reg32,mem			[rm:	o32 nof3 0f bd /r]			386,SM
BSR		reg32,reg32			[rm:	o32 nof3 0f bd /r]			386
BSR		reg64,mem			[rm:	o64 nof3 0f bd /r]			X64,SM
BSR		reg64,reg64			[rm:	o64 nof3 0f bd /r]			X64
BSWAP		reg32				[r:	o32 0f c8+r]				486
BSWAP		reg64				[r:	o64 0f c8+r]				X64
BT		mem,reg16			[mr:	o16 0f a3 /r]				386,SM
BT		reg16,reg16			[mr:	o16 0f a3 /r]				386
BT		mem,reg32			[mr:	o32 0f a3 /r]				386,SM
BT		reg32,reg32			[mr:	o32 0f a3 /r]				386
BT		mem,reg64			[mr:	o64 0f a3 /r]				X64,SM
BT		reg64,reg64			[mr:	o64 0f a3 /r]				X64
BT		rm16,imm			[mi:	o16 0f ba /4 ib,u]			386,SB
BT		rm32,imm			[mi:	o32 0f ba /4 ib,u]			386,SB
BT		rm64,imm			[mi:	o64 0f ba /4 ib,u]			X64,SB
BTC		mem,reg16			[mr:	hle o16 0f bb /r]			386,SM,LOCK
BTC		reg16,reg16			[mr:	o16 0f bb /r]				386
BTC		mem,reg32			[mr:	hle o32 0f bb /r]			386,SM,LOCK
BTC		reg32,reg32			[mr:	o32 0f bb /r]				386
BTC		mem,reg64			[mr:	hle o64 0f bb /r]			X64,SM,LOCK
BTC		reg64,reg64			[mr:	o64 0f bb /r]				X64
BTC		rm16,imm			[mi:	hle o16 0f ba /7 ib,u]			386,SB,LOCK
BTC		rm32,imm			[mi:	hle o32 0f ba /7 ib,u]			386,SB,LOCK
BTC		rm64,imm			[mi:	hle o64 0f ba /7 ib,u]			X64,SB,LOCK
BTR		mem,reg16			[mr:	hle o16 0f b3 /r]			386,SM,LOCK
BTR		reg16,reg16			[mr:	o16 0f b3 /r]				386
BTR		mem,reg32			[mr:	hle o32 0f b3 /r]			386,SM,LOCK
BTR		reg32,reg32			[mr:	o32 0f b3 /r]				386
BTR		mem,reg64			[mr:	hle o64 0f b3 /r]			X64,SM,LOCK
BTR		reg64,reg64			[mr:	o64 0f b3 /r]				X64
BTR		rm16,imm			[mi:	hle o16 0f ba /6 ib,u]			386,SB,LOCK
BTR		rm32,imm			[mi:	hle o32 0f ba /6 ib,u]			386,SB,LOCK
BTR		rm64,imm			[mi:	hle o64 0f ba /6 ib,u]			X64,SB,LOCK
BTS		mem,reg16			[mr:	hle o16 0f ab /r]			386,SM,LOCK
BTS		reg16,reg16			[mr:	o16 0f ab /r]				386
BTS		mem,reg32			[mr:	hle o32 0f ab /r]			386,SM,LOCK
BTS		reg32,reg32			[mr:	o32 0f ab /r]				386
BTS		mem,reg64			[mr:	hle o64 0f ab /r]			X64,SM,LOCK
BTS		reg64,reg64			[mr:	o64 0f ab /r]				X64
BTS		rm16,imm			[mi:	hle o16 0f ba /5 ib,u]			386,SB,LOCK
BTS		rm32,imm			[mi:	hle o32 0f ba /5 ib,u]			386,SB,LOCK
BTS		rm64,imm			[mi:	hle o64 0f ba /5 ib,u]			X64,SB,LOCK
CALL		imm				[i:	odf e8 rel]				8086,BND
CALL		imm|near			[i:	odf e8 rel]				8086,ND,BND
CALL		imm|far				[i:	odf 9a iwd seg]				8086,ND,NOLONG
; Call/jmp near imm/reg/mem is always 64-bit in long mode.
CALL		imm16				[i:	o16 e8 rel]				8086,NOLONG,BND
CALL		imm16|near			[i:	o16 e8 rel]				8086,ND,NOLONG,BND
CALL		imm16|far			[i:	o16 9a iwd seg]				8086,ND,NOLONG
CALL		imm32				[i:	o32 e8 rel]				386,NOLONG,BND
CALL		imm32|near			[i:	o32 e8 rel]				386,ND,NOLONG,BND
CALL		imm32|far			[i:	o32 9a iwd seg]				386,ND,NOLONG
CALL		imm64				[i:	o64nw e8 rel]				X64,BND
CALL		imm64|near			[i:	o64nw e8 rel]				X64,ND,BND
CALL		imm:imm				[ji:	odf 9a iwd iw]				8086,NOLONG
CALL		imm16:imm			[ji:	o16 9a iw iw]				8086,NOLONG
CALL		imm:imm16			[ji:	o16 9a iw iw]				8086,NOLONG
CALL		imm32:imm			[ji:	o32 9a id iw]				386,NOLONG
CALL		imm:imm32			[ji:	o32 9a id iw]				386,NOLONG
CALL		mem|far				[m:	odf ff /3]				8086,NOLONG
CALL		mem|far				[m:	o64 ff /3]				X64
CALL		mem16|far			[m:	o16 ff /3]				8086
CALL		mem32|far			[m:	o32 ff /3]				386
CALL		mem64|far			[m:	o64 ff /3]				X64
CALL		mem|near			[m:	odf ff /2]				8086,ND,BND
CALL		rm16|near			[m:	o16 ff /2]				8086,NOLONG,ND,BND
CALL		rm32|near			[m:	o32 ff /2]				386,NOLONG,ND,BND
CALL		rm64|near			[m:	o64nw ff /2]				X64,ND,BND
CALL		mem				[m:	odf ff /2]				8086,BND
CALL		rm16				[m:	o16 ff /2]				8086,NOLONG,BND
CALL		rm32				[m:	o32 ff /2]				386,NOLONG,BND
CALL		rm64				[m:	o64nw ff /2]				X64,BND

CBW		void				[	o16 98]					8086
CDQ		void				[	o32 99]					386
CDQE		void				[	o64 98]					X64
CLC		void				[	f8]					8086
CLD		void				[	fc]					8086
CLI		void				[	fa]					8086
CLTS		void				[	0f 06]					286,PRIV
CMC		void				[	f5]					8086
CMP		mem,reg8			[mr:	38 /r]					8086,SM
CMP		reg8,reg8			[mr:	38 /r]					8086
CMP		mem,reg16			[mr:	o16 39 /r]				8086,SM
CMP		reg16,reg16			[mr:	o16 39 /r]				8086
CMP		mem,reg32			[mr:	o32 39 /r]				386,SM
CMP		reg32,reg32			[mr:	o32 39 /r]				386
CMP		mem,reg64			[mr:	o64 39 /r]				X64,SM
CMP		reg64,reg64			[mr:	o64 39 /r]				X64
CMP		reg8,mem			[rm:	3a /r]					8086,SM
CMP		reg8,reg8			[rm:	3a /r]					8086
CMP		reg16,mem			[rm:	o16 3b /r]				8086,SM
CMP		reg16,reg16			[rm:	o16 3b /r]				8086
CMP		reg32,mem			[rm:	o32 3b /r]				386,SM
CMP		reg32,reg32			[rm:	o32 3b /r]				386
CMP		reg64,mem			[rm:	o64 3b /r]				X64,SM
CMP		reg64,reg64			[rm:	o64 3b /r]				X64
CMP		rm16,imm8			[mi:	o16 83 /7 ib,s]				8086
CMP		rm32,imm8			[mi:	o32 83 /7 ib,s]				386
CMP		rm64,imm8			[mi:	o64 83 /7 ib,s]				X64
CMP		reg_al,imm			[-i:	3c ib]					8086,SM
CMP		reg_ax,sbyteword		[mi:	o16 83 /7 ib,s]				8086,SM,ND
CMP		reg_ax,imm			[-i:	o16 3d iw]				8086,SM
CMP		reg_eax,sbytedword		[mi:	o32 83 /7 ib,s]				386,SM,ND
CMP		reg_eax,imm			[-i:	o32 3d id]				386,SM
CMP		reg_rax,sbytedword		[mi:	o64 83 /7 ib,s]				X64,SM,ND
CMP		reg_rax,imm			[-i:	o64 3d id,s]				X64,SM
CMP		rm8,imm				[mi:	80 /7 ib]				8086,SM
CMP		rm16,sbyteword			[mi:	o16 83 /7 ib,s]				8086,SM,ND
CMP		rm16,imm			[mi:	o16 81 /7 iw]				8086,SM
CMP		rm32,sbytedword			[mi:	o32 83 /7 ib,s]				386,SM,ND
CMP		rm32,imm			[mi:	o32 81 /7 id]				386,SM
CMP		rm64,sbytedword			[mi:	o64 83 /7 ib,s]				X64,SM,ND
CMP		rm64,imm			[mi:	o64 81 /7 id,s]				X64,SM
CMP		mem,imm8			[mi:	80 /7 ib]				8086,SM
CMP		mem,sbyteword16			[mi:	o16 83 /7 ib,s]				8086,SM,ND
CMP		mem,imm16			[mi:	o16 81 /7 iw]				8086,SM
CMP		mem,sbytedword32		[mi:	o32 83 /7 ib,s]				386,SM,ND
CMP		mem,imm32			[mi:	o32 81 /7 id]				386,SM
CMP		rm8,imm				[mi:	82 /7 ib]				8086,SM,ND,NOLONG
CMPSB		void				[	repe a6]				8086
CMPSD		void				[	repe o32 a7]				386
CMPSQ		void				[	repe o64 a7]				X64
CMPSW		void				[	repe o16 a7]				8086
CMPXCHG		mem,reg8			[mr:	hle 0f b0 /r]				PENT,SM,LOCK
CMPXCHG		reg8,reg8			[mr:	0f b0 /r]				PENT
CMPXCHG		mem,reg16			[mr:	hle o16 0f b1 /r]			PENT,SM,LOCK
CMPXCHG		reg16,reg16			[mr:	o16 0f b1 /r]				PENT
CMPXCHG		mem,reg32			[mr:	hle o32 0f b1 /r]			PENT,SM,LOCK
CMPXCHG		reg32,reg32			[mr:	o32 0f b1 /r]				PENT
CMPXCHG		mem,reg64			[mr:	hle o64 0f b1 /r]			X64,SM,LOCK
CMPXCHG		reg64,reg64			[mr:	o64 0f b1 /r]				X64
CMPXCHG486	mem,reg8			[mr:	0f a6 /r]				486,SM,UNDOC,ND,LOCK,OBSOLETE
CMPXCHG486	reg8,reg8			[mr:	0f a6 /r]				486,UNDOC,ND,OBSOLETE
CMPXCHG486	mem,reg16			[mr:	o16 0f a7 /r]				486,SM,UNDOC,ND,LOCK,OBSOLETE
CMPXCHG486	reg16,reg16			[mr:	o16 0f a7 /r]				486,UNDOC,ND,OBSOLETE
CMPXCHG486	mem,reg32			[mr:	o32 0f a7 /r]				486,SM,UNDOC,ND,LOCK,OBSOLETE
CMPXCHG486	reg32,reg32			[mr:	o32 0f a7 /r]				486,UNDOC,ND,OBSOLETE
CMPXCHG8B	mem				[m:	hle norexw 0f c7 /1]			PENT,LOCK
CMPXCHG16B	mem				[m:	o64 0f c7 /1]				X64,LOCK
CPUID		void				[	0f a2]					PENT
CPU_READ	void				[	0f 3d]					PENT,CYRIX
CPU_WRITE	void				[	0f 3c]					PENT,CYRIX
CQO		void				[	o64 99]					X64
CWD		void				[	o16 99]					8086
CWDE		void				[	o32 98]					386
DAA		void				[	27]					8086,NOLONG
DAS		void				[	2f]					8086,NOLONG
DEC		reg16				[r:	o16 48+r]				8086,NOLONG
DEC		reg32				[r:	o32 48+r]				386,NOLONG
DEC		rm8				[m:	hle fe /1]				8086,LOCK
DEC		rm16				[m:	hle o16 ff /1]				8086,LOCK
DEC		rm32				[m:	hle o32 ff /1]				386,LOCK
DEC		rm64				[m:	hle o64 ff /1]				X64,LOCK
DIV		rm8				[m:	f6 /6]					8086
DIV		rm16				[m:	o16 f7 /6]				8086
DIV		rm32				[m:	o32 f7 /6]				386
DIV		rm64				[m:	o64 f7 /6]				X64
DMINT		void				[	0f 39]					P6,CYRIX
EMMS		void				[	0f 77]					PENT,MMX
ENTER		imm,imm				[ij:	c8 iw ib,u]				186
F2XM1		void				[	d9 f0]					8086,FPU
FABS		void				[	d9 e1]					8086,FPU
FADD		mem32				[m:	d8 /0]					8086,FPU
FADD		mem64				[m:	dc /0]					8086,FPU
FADD		fpureg|to			[r:	dc c0+r]				8086,FPU
FADD		fpureg				[r:	d8 c0+r]				8086,FPU
FADD		fpureg,fpu0			[r-:	dc c0+r]				8086,FPU
FADD		fpu0,fpureg			[-r:	d8 c0+r]				8086,FPU
FADD		void				[	de c1]					8086,FPU,ND
FADDP		fpureg				[r:	de c0+r]				8086,FPU
FADDP		fpureg,fpu0			[r-:	de c0+r]				8086,FPU
FADDP		void				[	de c1]					8086,FPU,ND
FBLD		mem80				[m:	df /4]					8086,FPU
FBLD		mem				[m:	df /4]					8086,FPU
FBSTP		mem80				[m:	df /6]					8086,FPU
FBSTP		mem				[m:	df /6]					8086,FPU
FCHS		void				[	d9 e0]					8086,FPU
FCLEX		void				[	wait db e2]				8086,FPU
FCMOVB		fpureg				[r:	da c0+r]				P6,FPU
FCMOVB		fpu0,fpureg			[-r:	da c0+r]				P6,FPU
FCMOVB		void				[	da c1]					P6,FPU,ND
FCMOVBE		fpureg				[r:	da d0+r]				P6,FPU
FCMOVBE		fpu0,fpureg			[-r:	da d0+r]				P6,FPU
FCMOVBE		void				[	da d1]					P6,FPU,ND
FCMOVE		fpureg				[r:	da c8+r]				P6,FPU
FCMOVE		fpu0,fpureg			[-r:	da c8+r]				P6,FPU
FCMOVE		void				[	da c9]					P6,FPU,ND
FCMOVNB		fpureg				[r:	db c0+r]				P6,FPU
FCMOVNB		fpu0,fpureg			[-r:	db c0+r]				P6,FPU
FCMOVNB		void				[	db c1]					P6,FPU,ND
FCMOVNBE	fpureg				[r:	db d0+r]				P6,FPU
FCMOVNBE	fpu0,fpureg			[-r:	db d0+r]				P6,FPU
FCMOVNBE	void				[	db d1]					P6,FPU,ND
FCMOVNE		fpureg				[r:	db c8+r]				P6,FPU
FCMOVNE		fpu0,fpureg			[-r:	db c8+r]				P6,FPU
FCMOVNE		void				[	db c9]					P6,FPU,ND
FCMOVNU		fpureg				[r:	db d8+r]				P6,FPU
FCMOVNU		fpu0,fpureg			[-r:	db d8+r]				P6,FPU
FCMOVNU		void				[	db d9]					P6,FPU,ND
FCMOVU		fpureg				[r:	da d8+r]				P6,FPU
FCMOVU		fpu0,fpureg			[-r:	da d8+r]				P6,FPU
FCMOVU		void				[	da d9]					P6,FPU,ND
FCOM		mem32				[m:	d8 /2]					8086,FPU
FCOM		mem64				[m:	dc /2]					8086,FPU
FCOM		fpureg				[r:	d8 d0+r]				8086,FPU
FCOM		fpu0,fpureg			[-r:	d8 d0+r]				8086,FPU
FCOM		void				[	d8 d1]					8086,FPU,ND
FCOMI		fpureg				[r:	db f0+r]				P6,FPU
FCOMI		fpu0,fpureg			[-r:	db f0+r]				P6,FPU
FCOMI		void				[	db f1]					P6,FPU,ND
FCOMIP		fpureg				[r:	df f0+r]				P6,FPU
FCOMIP		fpu0,fpureg			[-r:	df f0+r]				P6,FPU
FCOMIP		void				[	df f1]					P6,FPU,ND
FCOMP		mem32				[m:	d8 /3]					8086,FPU
FCOMP		mem64				[m:	dc /3]					8086,FPU
FCOMP		fpureg				[r:	d8 d8+r]				8086,FPU
FCOMP		fpu0,fpureg			[-r:	d8 d8+r]				8086,FPU
FCOMP		void				[	d8 d9]					8086,FPU,ND
FCOMPP		void				[	de d9]					8086,FPU
FCOS		void				[	d9 ff]					386,FPU
FDECSTP		void				[	d9 f6]					8086,FPU
FDISI		void				[	wait db e1]				8086,FPU
FDIV		mem32				[m:	d8 /6]					8086,FPU
FDIV		mem64				[m:	dc /6]					8086,FPU
FDIV		fpureg|to			[r:	dc f8+r]				8086,FPU
FDIV		fpureg				[r:	d8 f0+r]				8086,FPU
FDIV		fpureg,fpu0			[r-:	dc f8+r]				8086,FPU
FDIV		fpu0,fpureg			[-r:	d8 f0+r]				8086,FPU
FDIV		void				[	de f9]					8086,FPU,ND
FDIVP		fpureg				[r:	de f8+r]				8086,FPU
FDIVP		fpureg,fpu0			[r-:	de f8+r]				8086,FPU
FDIVP		void				[	de f9]					8086,FPU,ND
FDIVR		mem32				[m:	d8 /7]					8086,FPU
FDIVR		mem64				[m:	dc /7]					8086,FPU
FDIVR		fpureg|to			[r:	dc f0+r]				8086,FPU
FDIVR		fpureg,fpu0			[r-:	dc f0+r]				8086,FPU
FDIVR		fpureg				[r:	d8 f8+r]				8086,FPU
FDIVR		fpu0,fpureg			[-r:	d8 f8+r]				8086,FPU
FDIVR		void				[	de f1]					8086,FPU,ND
FDIVRP		fpureg				[r:	de f0+r]				8086,FPU
FDIVRP		fpureg,fpu0			[r-:	de f0+r]				8086,FPU
FDIVRP		void				[	de f1]					8086,FPU,ND
FEMMS		void				[	0f 0e]					PENT,3DNOW
FENI		void				[	wait db e0]				8086,FPU
FFREE		fpureg				[r:	dd c0+r]				8086,FPU
FFREE		void				[	dd c1]					8086,FPU
FFREEP		fpureg				[r:	df c0+r]				286,FPU,UNDOC
FFREEP		void				[	df c1]					286,FPU,UNDOC
FIADD		mem32				[m:	da /0]					8086,FPU
FIADD		mem16				[m:	de /0]					8086,FPU
FICOM		mem32				[m:	da /2]					8086,FPU
FICOM		mem16				[m:	de /2]					8086,FPU
FICOMP		mem32				[m:	da /3]					8086,FPU
FICOMP		mem16				[m:	de /3]					8086,FPU
FIDIV		mem32				[m:	da /6]					8086,FPU
FIDIV		mem16				[m:	de /6]					8086,FPU
FIDIVR		mem32				[m:	da /7]					8086,FPU
FIDIVR		mem16				[m:	de /7]					8086,FPU
FILD		mem32				[m:	db /0]					8086,FPU
FILD		mem16				[m:	df /0]					8086,FPU
FILD		mem64				[m:	df /5]					8086,FPU
FIMUL		mem32				[m:	da /1]					8086,FPU
FIMUL		mem16				[m:	de /1]					8086,FPU
FINCSTP		void				[	d9 f7]					8086,FPU
FINIT		void				[	wait db e3]				8086,FPU
FIST		mem32				[m:	db /2]					8086,FPU
FIST		mem16				[m:	df /2]					8086,FPU
FISTP		mem32				[m:	db /3]					8086,FPU
FISTP		mem16				[m:	df /3]					8086,FPU
FISTP		mem64				[m:	df /7]					8086,FPU
FISTTP		mem16				[m:	df /1]					PRESCOTT,FPU
FISTTP		mem32				[m:	db /1]					PRESCOTT,FPU
FISTTP		mem64				[m:	dd /1]					PRESCOTT,FPU
FISUB		mem32				[m:	da /4]					8086,FPU
FISUB		mem16				[m:	de /4]					8086,FPU
FISUBR		mem32				[m:	da /5]					8086,FPU
FISUBR		mem16				[m:	de /5]					8086,FPU
FLD		mem32				[m:	d9 /0]					8086,FPU
FLD		mem64				[m:	dd /0]					8086,FPU
FLD		mem80				[m:	db /5]					8086,FPU
FLD		fpureg				[r:	d9 c0+r]				8086,FPU
FLD		void				[	d9 c1]					8086,FPU,ND
FLD1		void				[	d9 e8]					8086,FPU
FLDCW		mem				[m:	d9 /5]					8086,FPU,SW
FLDENV		mem				[m:	d9 /4]					8086,FPU
FLDL2E		void				[	d9 ea]					8086,FPU
FLDL2T		void				[	d9 e9]					8086,FPU
FLDLG2		void				[	d9 ec]					8086,FPU
FLDLN2		void				[	d9 ed]					8086,FPU
FLDPI		void				[	d9 eb]					8086,FPU
FLDZ		void				[	d9 ee]					8086,FPU
FMUL		mem32				[m:	d8 /1]					8086,FPU
FMUL		mem64				[m:	dc /1]					8086,FPU
FMUL		fpureg|to			[r:	dc c8+r]				8086,FPU
FMUL		fpureg,fpu0			[r-:	dc c8+r]				8086,FPU
FMUL		fpureg				[r:	d8 c8+r]				8086,FPU
FMUL		fpu0,fpureg			[-r:	d8 c8+r]				8086,FPU
FMUL		void				[	de c9]					8086,FPU,ND
FMULP		fpureg				[r:	de c8+r]				8086,FPU
FMULP		fpureg,fpu0			[r-:	de c8+r]				8086,FPU
FMULP		void				[	de c9]					8086,FPU,ND
FNCLEX		void				[	db e2]					8086,FPU
FNDISI		void				[	db e1]					8086,FPU
FNENI		void				[	db e0]					8086,FPU
FNINIT		void				[	db e3]					8086,FPU
FNOP		void				[	d9 d0]					8086,FPU
FNSAVE		mem				[m:	dd /6]					8086,FPU
FNSTCW		mem				[m:	d9 /7]					8086,FPU,SW
FNSTENV		mem				[m:	d9 /6]					8086,FPU
FNSTSW		mem				[m:	dd /7]					8086,FPU,SW
FNSTSW		reg_ax				[-:	df e0]					286,FPU
FPATAN		void				[	d9 f3]					8086,FPU
FPREM		void				[	d9 f8]					8086,FPU
FPREM1		void				[	d9 f5]					386,FPU
FPTAN		void				[	d9 f2]					8086,FPU
FRNDINT		void				[	d9 fc]					8086,FPU
FRSTOR		mem				[m:	dd /4]					8086,FPU
FSAVE		mem				[m:	wait dd /6]				8086,FPU
FSCALE		void				[	d9 fd]					8086,FPU
FSETPM		void				[	db e4]					286,FPU
FSIN		void				[	d9 fe]					386,FPU
FSINCOS		void				[	d9 fb]					386,FPU
FSQRT		void				[	d9 fa]					8086,FPU
FST		mem32				[m:	d9 /2]					8086,FPU
FST		mem64				[m:	dd /2]					8086,FPU
FST		fpureg				[r:	dd d0+r]				8086,FPU
FST		void				[	dd d1]					8086,FPU,ND
FSTCW		mem				[m:	wait d9 /7]				8086,FPU,SW
FSTENV		mem				[m:	wait d9 /6]				8086,FPU
FSTP		mem32				[m:	d9 /3]					8086,FPU
FSTP		mem64				[m:	dd /3]					8086,FPU
FSTP		mem80				[m:	db /7]					8086,FPU
FSTP		fpureg				[r:	dd d8+r]				8086,FPU
FSTP		void				[	dd d9]					8086,FPU,ND
FSTSW		mem				[m:	wait dd /7]				8086,FPU,SW
FSTSW		reg_ax				[-:	wait df e0]				286,FPU
FSUB		mem32				[m:	d8 /4]					8086,FPU
FSUB		mem64				[m:	dc /4]					8086,FPU
FSUB		fpureg|to			[r:	dc e8+r]				8086,FPU
FSUB		fpureg,fpu0			[r-:	dc e8+r]				8086,FPU
FSUB		fpureg				[r:	d8 e0+r]				8086,FPU
FSUB		fpu0,fpureg			[-r:	d8 e0+r]				8086,FPU
FSUB		void				[	de e9]					8086,FPU,ND
FSUBP		fpureg				[r:	de e8+r]				8086,FPU
FSUBP		fpureg,fpu0			[r-:	de e8+r]				8086,FPU
FSUBP		void				[	de e9]					8086,FPU,ND
FSUBR		mem32				[m:	d8 /5]					8086,FPU
FSUBR		mem64				[m:	dc /5]					8086,FPU
FSUBR		fpureg|to			[r:	dc e0+r]				8086,FPU
FSUBR		fpureg,fpu0			[r-:	dc e0+r]				8086,FPU
FSUBR		fpureg				[r:	d8 e8+r]				8086,FPU
FSUBR		fpu0,fpureg			[-r:	d8 e8+r]				8086,FPU
FSUBR		void				[	de e1]					8086,FPU,ND
FSUBRP		fpureg				[r:	de e0+r]				8086,FPU
FSUBRP		fpureg,fpu0			[r-:	de e0+r]				8086,FPU
FSUBRP		void				[	de e1]					8086,FPU,ND
FTST		void				[	d9 e4]					8086,FPU
FUCOM		fpureg				[r:	dd e0+r]				386,FPU
FUCOM		fpu0,fpureg			[-r:	dd e0+r]				386,FPU
FUCOM		void				[	dd e1]					386,FPU,ND
FUCOMI		fpureg				[r:	db e8+r]				P6,FPU
FUCOMI		fpu0,fpureg			[-r:	db e8+r]				P6,FPU
FUCOMI		void				[	db e9]					P6,FPU,ND
FUCOMIP		fpureg				[r:	df e8+r]				P6,FPU
FUCOMIP		fpu0,fpureg			[-r:	df e8+r]				P6,FPU
FUCOMIP		void				[	df e9]					P6,FPU,ND
FUCOMP		fpureg				[r:	dd e8+r]				386,FPU
FUCOMP		fpu0,fpureg			[-r:	dd e8+r]				386,FPU
FUCOMP		void				[	dd e9]					386,FPU,ND
FUCOMPP		void				[	da e9]					386,FPU
FXAM		void				[	d9 e5]					8086,FPU
FXCH		fpureg				[r:	d9 c8+r]				8086,FPU
FXCH		fpureg,fpu0			[r-:	d9 c8+r]				8086,FPU
FXCH		fpu0,fpureg			[-r:	d9 c8+r]				8086,FPU
FXCH		void				[	d9 c9]					8086,FPU,ND
FXTRACT		void				[	d9 f4]					8086,FPU
FYL2X		void				[	d9 f1]					8086,FPU
FYL2XP1		void				[	d9 f9]					8086,FPU
HLT		void				[	f4]					8086,PRIV
IBTS		mem,reg16			[mr:	o16 0f a7 /r]				386,SW,UNDOC,ND,OBSOLETE
IBTS		reg16,reg16			[mr:	o16 0f a7 /r]				386,UNDOC,ND,OBSOLETE
IBTS		mem,reg32			[mr:	o32 0f a7 /r]				386,SD,UNDOC,ND,OBSOLETE
IBTS		reg32,reg32			[mr:	o32 0f a7 /r]				386,UNDOC,ND,OBSOLETE
ICEBP		void				[	f1]					386,ND
IDIV		rm8				[m:	f6 /7]					8086
IDIV		rm16				[m:	o16 f7 /7]				8086
IDIV		rm32				[m:	o32 f7 /7]				386
IDIV		rm64				[m:	o64 f7 /7]				X64
IMUL		rm8				[m:	f6 /5]					8086
IMUL		rm16				[m:	o16 f7 /5]				8086
IMUL		rm32				[m:	o32 f7 /5]				386
IMUL		rm64				[m:	o64 f7 /5]				X64
IMUL		reg16,mem			[rm:	o16 0f af /r]				386,SM
IMUL		reg16,reg16			[rm:	o16 0f af /r]				386
IMUL		reg32,mem			[rm:	o32 0f af /r]				386,SM
IMUL		reg32,reg32			[rm:	o32 0f af /r]				386
IMUL		reg64,mem			[rm:	o64 0f af /r]				X64,SM
IMUL		reg64,reg64			[rm:	o64 0f af /r]				X64
IMUL		reg16,mem,imm8			[rmi:	o16 6b /r ib,s]				186,SM
IMUL		reg16,mem,sbyteword		[rmi:	o16 6b /r ib,s]				186,SM,ND
IMUL		reg16,mem,imm16			[rmi:	o16 69 /r iw]				186,SM
IMUL		reg16,mem,imm			[rmi:	o16 69 /r iw]				186,SM,ND
IMUL		reg16,reg16,imm8		[rmi:	o16 6b /r ib,s]				186
IMUL		reg16,reg16,sbyteword		[rmi:	o16 6b /r ib,s]				186,SM,ND
IMUL		reg16,reg16,imm16		[rmi:	o16 69 /r iw]				186
IMUL		reg16,reg16,imm			[rmi:	o16 69 /r iw]				186,SM,ND
IMUL		reg32,mem,imm8			[rmi:	o32 6b /r ib,s]				386,SM
IMUL		reg32,mem,sbytedword		[rmi:	o32 6b /r ib,s]				386,SM,ND
IMUL		reg32,mem,imm32			[rmi:	o32 69 /r id]				386,SM
IMUL		reg32,mem,imm			[rmi:	o32 69 /r id]				386,SM,ND
IMUL		reg32,reg32,imm8		[rmi:	o32 6b /r ib,s]				386
IMUL		reg32,reg32,sbytedword		[rmi:	o32 6b /r ib,s]				386,SM,ND
IMUL		reg32,reg32,imm32		[rmi:	o32 69 /r id]				386
IMUL		reg32,reg32,imm			[rmi:	o32 69 /r id]				386,SM,ND
IMUL		reg64,mem,imm8			[rmi:	o64 6b /r ib,s]				X64,SM
IMUL		reg64,mem,sbytedword		[rmi:	o64 6b /r ib,s]				X64,SM,ND
IMUL		reg64,mem,imm32			[rmi:	o64 69 /r id]				X64,SM
IMUL		reg64,mem,imm			[rmi:	o64 69 /r id,s]				X64,SM,ND
IMUL		reg64,reg64,imm8		[rmi:	o64 6b /r ib,s]				X64
IMUL		reg64,reg64,sbytedword		[rmi:	o64 6b /r ib,s]				X64,SM,ND
IMUL		reg64,reg64,imm32		[rmi:	o64 69 /r id]				X64
IMUL		reg64,reg64,imm			[rmi:	o64 69 /r id,s]				X64,SM,ND
IMUL		reg16,imm8			[r+mi:	o16 6b /r ib,s]				186
IMUL		reg16,sbyteword			[r+mi:	o16 6b /r ib,s]				186,SM,ND
IMUL		reg16,imm16			[r+mi:	o16 69 /r iw]				186
IMUL		reg16,imm			[r+mi:	o16 69 /r iw]				186,SM,ND
IMUL		reg32,imm8			[r+mi:	o32 6b /r ib,s]				386
IMUL		reg32,sbytedword		[r+mi:	o32 6b /r ib,s]				386,SM,ND
IMUL		reg32,imm32			[r+mi:	o32 69 /r id]				386
IMUL		reg32,imm			[r+mi:	o32 69 /r id]				386,SM,ND
IMUL		reg64,imm8			[r+mi:	o64 6b /r ib,s]				X64
IMUL		reg64,sbytedword		[r+mi:	o64 6b /r ib,s]				X64,SM,ND
IMUL		reg64,imm32			[r+mi:	o64 69 /r id,s]				X64
IMUL		reg64,imm			[r+mi:	o64 69 /r id,s]				X64,SM,ND
IN		reg_al,imm			[-i:	e4 ib,u]				8086,SB
IN		reg_ax,imm			[-i:	o16 e5 ib,u]				8086,SB
IN		reg_eax,imm			[-i:	o32 e5 ib,u]				386,SB
IN		reg_al,reg_dx			[--:	ec]					8086
IN		reg_ax,reg_dx			[--:	o16 ed]					8086
IN		reg_eax,reg_dx			[--:	o32 ed]					386
INC		reg16				[r:	o16 40+r]				8086,NOLONG
INC		reg32				[r:	o32 40+r]				386,NOLONG
INC		rm8				[m:	hle fe /0]				8086,LOCK
INC		rm16				[m:	hle o16 ff /0]				8086,LOCK
INC		rm32				[m:	hle o32 ff /0]				386,LOCK
INC		rm64				[m:	hle o64 ff /0]				X64,LOCK
INCBIN		ignore				ignore						ignore
INSB		void				[	6c]					186
INSD		void				[	o32 6d]					386
INSW		void				[	o16 6d]					186
INT		imm				[i:	cd ib,u]				8086,SB
INT01		void				[	f1]					386,ND
INT1		void				[	f1]					386
INT03		void				[	cc]					8086,ND
INT3		void				[	cc]					8086
INTO		void				[	ce]					8086,NOLONG
INVD		void				[	0f 08]					486,PRIV
INVPCID		reg32,mem128			[rm:	66 0f 38 82 /r]				FUTURE,INVPCID,PRIV,NOLONG
INVPCID		reg64,mem128			[rm:	66 0f 38 82 /r]				FUTURE,INVPCID,PRIV,LONG
INVLPG		mem				[m:	0f 01 /7]				486,PRIV
INVLPGA		reg_ax,reg_ecx			[--:	a16 0f 01 df]				X86_64,AMD,NOLONG
INVLPGA		reg_eax,reg_ecx			[--:	a32 0f 01 df]				X86_64,AMD
INVLPGA		reg_rax,reg_ecx			[--:	o64nw a64 0f 01 df]			X64,AMD
INVLPGA		void				[	0f 01 df]				X86_64,AMD
IRET		void				[	odf cf]					8086
IRETD		void				[	o32 cf]					386
IRETQ		void				[	o64 cf]					X64
IRETW		void				[	o16 cf]					8086
JCXZ		imm				[i:	a16 e3 rel8]				8086,NOLONG
JECXZ		imm				[i:	a32 e3 rel8]				386
JRCXZ		imm				[i:	a64 e3 rel8]				X64
JMP		imm|short			[i:	eb rel8]				8086
JMP		imm				[i:	jmp8 eb rel8]				8086,ND
JMP		imm				[i:	odf e9 rel]				8086,BND
JMP		imm|near			[i:	odf e9 rel]				8086,ND,BND
JMP		imm|far				[i:	odf ea iwd seg]				8086,ND,NOLONG
; Call/jmp near imm/reg/mem is always 64-bit in long mode.
JMP		imm16				[i:	o16 e9 rel]				8086,NOLONG,BND
JMP		imm16|near			[i:	o16 e9 rel]				8086,ND,NOLONG,BND
JMP		imm16|far			[i:	o16 ea iwd seg]				8086,ND,NOLONG
JMP		imm32				[i:	o32 e9 rel]				386,NOLONG,BND
JMP		imm32|near			[i:	o32 e9 rel]				386,ND,NOLONG,BND
JMP		imm32|far			[i:	o32 ea iwd seg]				386,ND,NOLONG
JMP		imm64				[i:	o64nw e9 rel]				X64,BND
JMP		imm64|near			[i:	o64nw e9 rel]				X64,ND,BND
JMP		imm:imm				[ji:	odf ea iwd iw]				8086,NOLONG
JMP		imm16:imm			[ji:	o16 ea iw iw]				8086,NOLONG
JMP		imm:imm16			[ji:	o16 ea iw iw]				8086,NOLONG
JMP		imm32:imm			[ji:	o32 ea id iw]				386,NOLONG
JMP		imm:imm32			[ji:	o32 ea id iw]				386,NOLONG
JMP		mem|far				[m:	odf ff /5]				8086,NOLONG
JMP		mem|far				[m:	o64 ff /5]				X64
JMP		mem16|far			[m:	o16 ff /5]				8086
JMP		mem32|far			[m:	o32 ff /5]				386
JMP		mem64|far			[m:	o64 ff /5]				X64
JMP		mem|near			[m:	odf ff /4]				8086,ND,BND
JMP		rm16|near			[m:	o16 ff /4]				8086,NOLONG,ND,BND
JMP		rm32|near			[m:	o32 ff /4]				386,NOLONG,ND,BND
JMP		rm64|near			[m:	o64nw ff /4]				X64,ND,BND
JMP		mem				[m:	odf ff /4]				8086,BND
JMP		rm16				[m:	o16 ff /4]				8086,NOLONG,BND
JMP		rm32				[m:	o32 ff /4]				386,NOLONG,BND
JMP		rm64				[m:	o64nw ff /4]				X64,BND

JMPE		imm				[i:	odf 0f b8 rel]				IA64
JMPE		imm16				[i:	o16 0f b8 rel]				IA64
JMPE		imm32				[i:	o32 0f b8 rel]				IA64
JMPE		rm16				[m:	o16 0f 00 /6]				IA64
JMPE		rm32				[m:	o32 0f 00 /6]				IA64
LAHF		void				[	9f]					8086
LAR		reg16,mem			[rm:	o16 0f 02 /r]				286,PROT,SW
LAR		reg16,reg16			[rm:	o16 0f 02 /r]				286,PROT
LAR		reg16,reg32			[rm:	o16 0f 02 /r]				386,PROT
LAR		reg16,reg64			[rm:	o16 o64nw 0f 02 /r]			X64,PROT,ND
LAR		reg32,mem			[rm:	o32 0f 02 /r]				386,PROT,SW
LAR		reg32,reg16			[rm:	o32 0f 02 /r]				386,PROT
LAR		reg32,reg32			[rm:	o32 0f 02 /r]				386,PROT
LAR		reg32,reg64			[rm:	o32 o64nw 0f 02 /r]			X64,PROT,ND
LAR		reg64,mem			[rm:	o64 0f 02 /r]				X64,PROT,SW
LAR		reg64,reg16			[rm:	o64 0f 02 /r]				X64,PROT
LAR		reg64,reg32			[rm:	o64 0f 02 /r]				X64,PROT
LAR		reg64,reg64			[rm:	o64 0f 02 /r]				X64,PROT
LDS		reg16,mem			[rm:	o16 c5 /r]				8086,NOLONG
LDS		reg32,mem			[rm:	o32 c5 /r]				386,NOLONG
LEA		reg16,mem			[rm:	o16 8d /r]				8086
LEA		reg32,mem			[rm:	o32 8d /r]				386
LEA		reg64,mem			[rm:	o64 8d /r]				X64
LEAVE		void				[	c9]					186
LES		reg16,mem			[rm:	o16 c4 /r]				8086,NOLONG
LES		reg32,mem			[rm:	o32 c4 /r]				386,NOLONG
LFENCE		void				[	np 0f ae e8]				X64,AMD
LFS		reg16,mem			[rm:	o16 0f b4 /r]				386
LFS		reg32,mem			[rm:	o32 0f b4 /r]				386
LFS		reg64,mem			[rm:	o64 0f b4 /r]				X64
LGDT		mem				[m:	0f 01 /2]				286,PRIV
LGS		reg16,mem			[rm:	o16 0f b5 /r]				386
LGS		reg32,mem			[rm:	o32 0f b5 /r]				386
LGS		reg64,mem			[rm:	o64 0f b5 /r]				X64
LIDT		mem				[m:	0f 01 /3]				286,PRIV
LLDT		mem				[m:	0f 00 /2]				286,PROT,PRIV
LLDT		mem16				[m:	0f 00 /2]				286,PROT,PRIV
LLDT		reg16				[m:	0f 00 /2]				286,PROT,PRIV
LMSW		mem				[m:	0f 01 /6]				286,PRIV
LMSW		mem16				[m:	0f 01 /6]				286,PRIV
LMSW		reg16				[m:	0f 01 /6]				286,PRIV
LOADALL		void				[	0f 07]					386,UNDOC,ND,OBSOLETE
LOADALL286	void				[	0f 05]					286,UNDOC,ND,OBSOLETE
LODSB		void				[	ac]					8086
LODSD		void				[	o32 ad]					386
LODSQ		void				[	o64 ad]					X64
LODSW		void				[	o16 ad]					8086
LOOP		imm				[i:	adf e2 rel8]				8086
LOOP		imm,reg_cx			[i-:	a16 e2 rel8]				8086,NOLONG
LOOP		imm,reg_ecx			[i-:	a32 e2 rel8]				386
LOOP		imm,reg_rcx			[i-:	a64 e2 rel8]				X64
LOOPE		imm				[i:	adf e1 rel8]				8086
LOOPE		imm,reg_cx			[i-:	a16 e1 rel8]				8086,NOLONG
LOOPE		imm,reg_ecx			[i-:	a32 e1 rel8]				386
LOOPE		imm,reg_rcx			[i-:	a64 e1 rel8]				X64
LOOPNE		imm				[i:	adf e0 rel8]				8086
LOOPNE		imm,reg_cx			[i-:	a16 e0 rel8]				8086,NOLONG
LOOPNE		imm,reg_ecx			[i-:	a32 e0 rel8]				386
LOOPNE		imm,reg_rcx			[i-:	a64 e0 rel8]				X64
LOOPNZ		imm				[i:	adf e0 rel8]				8086
LOOPNZ		imm,reg_cx			[i-:	a16 e0 rel8]				8086,NOLONG
LOOPNZ		imm,reg_ecx			[i-:	a32 e0 rel8]				386
LOOPNZ		imm,reg_rcx			[i-:	a64 e0 rel8]				X64
LOOPZ		imm				[i:	adf e1 rel8]				8086
LOOPZ		imm,reg_cx			[i-:	a16 e1 rel8]				8086,NOLONG
LOOPZ		imm,reg_ecx			[i-:	a32 e1 rel8]				386
LOOPZ		imm,reg_rcx			[i-:	a64 e1 rel8]				X64
LSL		reg16,mem			[rm:	o16 0f 03 /r]				286,PROT,SW
LSL		reg16,reg16			[rm:	o16 0f 03 /r]				286,PROT
LSL		reg16,reg32			[rm:	o16 0f 03 /r]				386,PROT
LSL		reg16,reg64			[rm:	o16 o64nw 0f 03 /r]			X64,PROT,ND
LSL		reg32,mem			[rm:	o32 0f 03 /r]				386,PROT,SW
LSL		reg32,reg16			[rm:	o32 0f 03 /r]				386,PROT
LSL		reg32,reg32			[rm:	o32 0f 03 /r]				386,PROT
LSL		reg32,reg64			[rm:	o32 o64nw 0f 03 /r]			X64,PROT,ND
LSL		reg64,mem			[rm:	o64 0f 03 /r]				X64,PROT,SW
LSL		reg64,reg16			[rm:	o64 0f 03 /r]				X64,PROT
LSL		reg64,reg32			[rm:	o64 0f 03 /r]				X64,PROT
LSL		reg64,reg64			[rm:	o64 0f 03 /r]				X64,PROT
LSS		reg16,mem			[rm:	o16 0f b2 /r]				386
LSS		reg32,mem			[rm:	o32 0f b2 /r]				386
LSS		reg64,mem			[rm:	o64 0f b2 /r]				X64
LTR		mem				[m:	0f 00 /3]				286,PROT,PRIV
LTR		mem16				[m:	0f 00 /3]				286,PROT,PRIV
LTR		reg16				[m:	0f 00 /3]				286,PROT,PRIV
MFENCE		void				[	np 0f ae f0]				X64,AMD
MONITOR		void				[	0f 01 c8]				PRESCOTT
MONITOR		reg_eax,reg_ecx,reg_edx		[---:	0f 01 c8]				PRESCOTT,NOLONG,ND
MONITOR		reg_rax,reg_ecx,reg_edx		[---:	0f 01 c8]				X64,ND
MONITORX	void				[	0f 01 fa]				AMD
MONITORX	reg_rax,reg_ecx,reg_edx		[---:	0f 01 fa]				X64,AMD,ND
MONITORX	reg_eax,reg_ecx,reg_edx		[---:	0f 01 fa]				AMD,ND
MONITORX	reg_ax,reg_ecx,reg_edx		[---:	0f 01 fa]				AMD,ND
MOV		mem,reg_sreg			[mr:	8c /r]					8086,SW
MOV		reg16,reg_sreg			[mr:	o16 8c /r]				8086
MOV		reg32,reg_sreg			[mr:	o32 8c /r]				386
MOV		reg64,reg_sreg			[mr:	o64nw 8c /r]				X64,OPT,ND
MOV		rm64,reg_sreg			[mr:	o64 8c /r]				X64
MOV		reg_sreg,mem			[rm:	8e /r]					8086,SW
MOV		reg_sreg,reg16			[rm:	8e /r]					8086,OPT,ND
MOV		reg_sreg,reg32			[rm:	8e /r]					386,OPT,ND
MOV		reg_sreg,reg64			[rm:	o64nw 8e /r]				X64,OPT,ND
MOV		reg_sreg,reg16			[rm:	o16 8e /r]				8086
MOV		reg_sreg,reg32			[rm:	o32 8e /r]				386
MOV		reg_sreg,rm64			[rm:	o64 8e /r]				X64
MOV		reg_al,mem_offs			[-i:	a0 iwdq]				8086,SM
MOV		reg_ax,mem_offs			[-i:	o16 a1 iwdq]				8086,SM
MOV		reg_eax,mem_offs		[-i:	o32 a1 iwdq]				386,SM
MOV		reg_rax,mem_offs		[-i:	o64 a1 iwdq]				X64,SM
MOV		mem_offs,reg_al			[i-:	a2 iwdq]				8086,SM,NOHLE
MOV		mem_offs,reg_ax			[i-:	o16 a3 iwdq]				8086,SM,NOHLE
MOV		mem_offs,reg_eax		[i-:	o32 a3 iwdq]				386,SM,NOHLE
MOV		mem_offs,reg_rax		[i-:	o64 a3 iwdq]				X64,SM,NOHLE
MOV		reg32,reg_creg			[mr:	rex.l 0f 20 /r]				386,PRIV,NOLONG
MOV		reg64,reg_creg			[mr:	o64nw 0f 20 /r]				X64,PRIV
MOV		reg_creg,reg32			[rm:	rex.l 0f 22 /r]				386,PRIV,NOLONG
MOV		reg_creg,reg64			[rm:	o64nw 0f 22 /r]				X64,PRIV
MOV		reg32,reg_dreg			[mr:	0f 21 /r]				386,PRIV,NOLONG
MOV		reg64,reg_dreg			[mr:	o64nw 0f 21 /r]				X64,PRIV
MOV		reg_dreg,reg32			[rm:	0f 23 /r]				386,PRIV,NOLONG
MOV		reg_dreg,reg64			[rm:	o64nw 0f 23 /r]				X64,PRIV
MOV		reg32,reg_treg			[mr:	0f 24 /r]				386,NOLONG,ND
MOV		reg_treg,reg32			[rm:	0f 26 /r]				386,NOLONG,ND
MOV		mem,reg8			[mr:	hlexr 88 /r]				8086,SM
MOV		reg8,reg8			[mr:	88 /r]					8086
MOV		mem,reg16			[mr:	hlexr o16 89 /r]			8086,SM
MOV		reg16,reg16			[mr:	o16 89 /r]				8086
MOV		mem,reg32			[mr:	hlexr o32 89 /r]			386,SM
MOV		reg32,reg32			[mr:	o32 89 /r]				386
MOV		mem,reg64			[mr:	hlexr o64 89 /r]			X64,SM
MOV		reg64,reg64			[mr:	o64 89 /r]				X64
MOV		reg8,mem			[rm:	8a /r]					8086,SM
MOV		reg8,reg8			[rm:	8a /r]					8086
MOV		reg16,mem			[rm:	o16 8b /r]				8086,SM
MOV		reg16,reg16			[rm:	o16 8b /r]				8086
MOV		reg32,mem			[rm:	o32 8b /r]				386,SM
MOV		reg32,reg32			[rm:	o32 8b /r]				386
MOV		reg64,mem			[rm:	o64 8b /r]				X64,SM
MOV		reg64,reg64			[rm:	o64 8b /r]				X64
MOV		reg8,imm			[ri:	b0+r ib]				8086,SM
MOV		reg16,imm			[ri:	o16 b8+r iw]				8086,SM
MOV		reg32,imm			[ri:	o32 b8+r id]				386,SM
MOV		reg64,udword			[ri:	o64nw b8+r id]				X64,SM,OPT,ND
MOV		reg64,sdword			[mi:	o64 c7 /0 id,s]				X64,SM,OPT,ND
MOV		reg64,imm			[ri:	o64 b8+r iq]				X64,SM
MOV		rm8,imm				[mi:	hlexr c6 /0 ib]				8086,SM
MOV		rm16,imm			[mi:	hlexr o16 c7 /0 iw]			8086,SM
MOV		rm32,imm			[mi:	hlexr o32 c7 /0 id]			386,SM
MOV		rm64,imm			[mi:	hlexr o64 c7 /0 id,s]			X64,SM
MOV		rm64,imm32			[mi:	hlexr o64 c7 /0 id,s]			X64
MOV		mem,imm8			[mi:	hlexr c6 /0 ib]				8086,SM
MOV		mem,imm16			[mi:	hlexr o16 c7 /0 iw]			8086,SM
MOV		mem,imm32			[mi:	hlexr o32 c7 /0 id]			386,SM
MOVD		mmxreg,rm32			[rm:	np 0f 6e /r]				PENT,MMX,SD
MOVD		rm32,mmxreg			[mr:	np 0f 7e /r]				PENT,MMX,SD
MOVD		mmxreg,rm64			[rm:	np o64 0f 6e /r]			X64,MMX,SX,ND
MOVD		rm64,mmxreg			[mr:	np o64 0f 7e /r]			X64,MMX,SX,ND
MOVQ		mmxreg,mmxrm			[rm:	np 0f 6f /r]				PENT,MMX,SQ
MOVQ		mmxrm,mmxreg			[mr:	np 0f 7f /r]				PENT,MMX,SQ
MOVQ		mmxreg,rm64			[rm:	np o64 0f 6e /r]			X64,MMX
MOVQ		rm64,mmxreg			[mr:	np o64 0f 7e /r]			X64,MMX
MOVSB		void				[	a4]					8086
MOVSD		void				[	o32 a5]					386
MOVSQ		void				[	o64 a5]					X64
MOVSW		void				[	o16 a5]					8086
MOVSX		reg16,mem			[rm:	o16 0f be /r]				386,SB
MOVSX		reg16,reg8			[rm:	o16 0f be /r]				386
MOVSX		reg32,rm8			[rm:	o32 0f be /r]				386
MOVSX		reg32,rm16			[rm:	o32 0f bf /r]				386
MOVSX		reg64,rm8			[rm:	o64 0f be /r]				X64
MOVSX		reg64,rm16			[rm:	o64 0f bf /r]				X64
MOVSXD		reg64,rm32			[rm:	o64 63 /r]				X64
MOVSX		reg64,rm32			[rm:	o64 63 /r]				X64,ND
MOVZX		reg16,mem			[rm:	o16 0f b6 /r]				386,SB
MOVZX		reg16,reg8			[rm:	o16 0f b6 /r]				386
MOVZX		reg32,rm8			[rm:	o32 0f b6 /r]				386
MOVZX		reg32,rm16			[rm:	o32 0f b7 /r]				386
MOVZX		reg64,rm8			[rm:	o64 0f b6 /r]				X64
MOVZX		reg64,rm16			[rm:	o64 0f b7 /r]				X64
MUL		rm8				[m:	f6 /4]					8086
MUL		rm16				[m:	o16 f7 /4]				8086
MUL		rm32				[m:	o32 f7 /4]				386
MUL		rm64				[m:	o64 f7 /4]				X64
MWAIT		void				[	0f 01 c9]				PRESCOTT
MWAIT		reg_eax,reg_ecx			[--:	0f 01 c9]				PRESCOTT,ND
MWAITX		void				[	0f 01 fb]				AMD
MWAITX		reg_eax,reg_ecx			[--:	0f 01 fb]				AMD,ND
NEG		rm8				[m:	hle f6 /3]				8086,LOCK
NEG		rm16				[m:	hle o16 f7 /3]				8086,LOCK
NEG		rm32				[m:	hle o32 f7 /3]				386,LOCK
NEG		rm64				[m:	hle o64 f7 /3]				X64,LOCK
NOP		void				[	norexb nof3 90]				8086
NOP		rm16				[m:	o16 0f 1f /0]				P6
NOP		rm32				[m:	o32 0f 1f /0]				P6
NOP		rm64				[m:	o64 0f 1f /0]				X64
NOT		rm8				[m:	hle f6 /2]				8086,LOCK
NOT		rm16				[m:	hle o16 f7 /2]				8086,LOCK
NOT		rm32				[m:	hle o32 f7 /2]				386,LOCK
NOT		rm64				[m:	hle o64 f7 /2]				X64,LOCK
OR		mem,reg8			[mr:	hle 08 /r]				8086,SM,LOCK
OR		reg8,reg8			[mr:	08 /r]					8086
OR		mem,reg16			[mr:	hle o16 09 /r]				8086,SM,LOCK
OR		reg16,reg16			[mr:	o16 09 /r]				8086
OR		mem,reg32			[mr:	hle o32 09 /r]				386,SM,LOCK
OR		reg32,reg32			[mr:	o32 09 /r]				386
OR		mem,reg64			[mr:	hle o64 09 /r]				X64,SM,LOCK
OR		reg64,reg64			[mr:	o64 09 /r]				X64
OR		reg8,mem			[rm:	0a /r]					8086,SM
OR		reg8,reg8			[rm:	0a /r]					8086
OR		reg16,mem			[rm:	o16 0b /r]				8086,SM
OR		reg16,reg16			[rm:	o16 0b /r]				8086
OR		reg32,mem			[rm:	o32 0b /r]				386,SM
OR		reg32,reg32			[rm:	o32 0b /r]				386
OR		reg64,mem			[rm:	o64 0b /r]				X64,SM
OR		reg64,reg64			[rm:	o64 0b /r]				X64
OR		rm16,imm8			[mi:	hle o16 83 /1 ib,s]			8086,LOCK
OR		rm32,imm8			[mi:	hle o32 83 /1 ib,s]			386,LOCK
OR		rm64,imm8			[mi:	hle o64 83 /1 ib,s]			X64,LOCK
OR		reg_al,imm			[-i:	0c ib]					8086,SM
OR		reg_ax,sbyteword		[mi:	o16 83 /1 ib,s]				8086,SM,ND
OR		reg_ax,imm			[-i:	o16 0d iw]				8086,SM
OR		reg_eax,sbytedword		[mi:	o32 83 /1 ib,s]				386,SM,ND
OR		reg_eax,imm			[-i:	o32 0d id]				386,SM
OR		reg_rax,sbytedword		[mi:	o64 83 /1 ib,s]				X64,SM,ND
OR		reg_rax,imm			[-i:	o64 0d id,s]				X64,SM
OR		rm8,imm				[mi:	hle 80 /1 ib]				8086,SM,LOCK
OR		rm16,sbyteword			[mi:	hle o16 83 /1 ib,s]			8086,SM,LOCK,ND
OR		rm16,imm			[mi:	hle o16 81 /1 iw]			8086,SM,LOCK
OR		rm32,sbytedword			[mi:	hle o32 83 /1 ib,s]			386,SM,LOCK,ND
OR		rm32,imm			[mi:	hle o32 81 /1 id]			386,SM,LOCK
OR		rm64,sbytedword			[mi:	hle o64 83 /1 ib,s]			X64,SM,LOCK,ND
OR		rm64,imm			[mi:	hle o64 81 /1 id,s]			X64,SM,LOCK
OR		mem,imm8			[mi:	hle 80 /1 ib]				8086,SM,LOCK
OR		mem,sbyteword16			[mi:	hle o16 83 /1 ib,s]			8086,SM,LOCK,ND
OR		mem,imm16			[mi:	hle o16 81 /1 iw]			8086,SM,LOCK
OR		mem,sbytedword32		[mi:	hle o32 83 /1 ib,s]			386,SM,LOCK,ND
OR		mem,imm32			[mi:	hle o32 81 /1 id]			386,SM,LOCK
OR		rm8,imm				[mi:	hle 82 /1 ib]				8086,SM,LOCK,ND,NOLONG
OUT		imm,reg_al			[i-:	e6 ib,u]				8086,SB
OUT		imm,reg_ax			[i-:	o16 e7 ib,u]				8086,SB
OUT		imm,reg_eax			[i-:	o32 e7 ib,u]				386,SB
OUT		reg_dx,reg_al			[--:	ee]					8086
OUT		reg_dx,reg_ax			[--:	o16 ef]					8086
OUT		reg_dx,reg_eax			[--:	o32 ef]					386
OUTSB		void				[	6e]					186
OUTSD		void				[	o32 6f]					386
OUTSW		void				[	o16 6f]					186
PACKSSDW	mmxreg,mmxrm			[rm:	np o64nw 0f 6b /r]			PENT,MMX,SQ
PACKSSWB	mmxreg,mmxrm			[rm:	np o64nw 0f 63 /r]			PENT,MMX,SQ
PACKUSWB	mmxreg,mmxrm			[rm:	np o64nw 0f 67 /r]			PENT,MMX,SQ
PADDB		mmxreg,mmxrm			[rm:	np o64nw 0f fc /r]			PENT,MMX,SQ
PADDD		mmxreg,mmxrm			[rm:	np o64nw 0f fe /r]			PENT,MMX,SQ
PADDSB		mmxreg,mmxrm			[rm:	np o64nw 0f ec /r]			PENT,MMX,SQ
PADDSIW		mmxreg,mmxrm			[rm:	o64nw 0f 51 /r]				PENT,MMX,SQ,CYRIX
PADDSW		mmxreg,mmxrm			[rm:	np o64nw 0f ed /r]			PENT,MMX,SQ
PADDUSB		mmxreg,mmxrm			[rm:	np o64nw 0f dc /r]			PENT,MMX,SQ
PADDUSW		mmxreg,mmxrm			[rm:	np o64nw 0f dd /r]			PENT,MMX,SQ
PADDW		mmxreg,mmxrm			[rm:	np o64nw 0f fd /r]			PENT,MMX,SQ
PAND		mmxreg,mmxrm			[rm:	np o64nw 0f db /r]			PENT,MMX,SQ
PANDN		mmxreg,mmxrm			[rm:	np o64nw 0f df /r]			PENT,MMX,SQ
PAUSE		void				[	f3i 90]					8086
PAVEB		mmxreg,mmxrm			[rm:	o64nw 0f 50 /r]				PENT,MMX,SQ,CYRIX
PAVGUSB		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r bf]			PENT,3DNOW,SQ
PCMPEQB		mmxreg,mmxrm			[rm:	np o64nw 0f 74 /r]			PENT,MMX,SQ
PCMPEQD		mmxreg,mmxrm			[rm:	np o64nw 0f 76 /r]			PENT,MMX,SQ
PCMPEQW		mmxreg,mmxrm			[rm:	np o64nw 0f 75 /r]			PENT,MMX,SQ
PCMPGTB		mmxreg,mmxrm			[rm:	np o64nw 0f 64 /r]			PENT,MMX,SQ
PCMPGTD		mmxreg,mmxrm			[rm:	np o64nw 0f 66 /r]			PENT,MMX,SQ
PCMPGTW		mmxreg,mmxrm			[rm:	np o64nw 0f 65 /r]			PENT,MMX,SQ
PDISTIB		mmxreg,mem			[rm:	0f 54 /r]				PENT,MMX,SM,CYRIX
PF2ID		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r 1d]			PENT,3DNOW,SQ
PFACC		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r ae]			PENT,3DNOW,SQ
PFADD		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r 9e]			PENT,3DNOW,SQ
PFCMPEQ		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r b0]			PENT,3DNOW,SQ
PFCMPGE		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r 90]			PENT,3DNOW,SQ
PFCMPGT		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r a0]			PENT,3DNOW,SQ
PFMAX		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r a4]			PENT,3DNOW,SQ
PFMIN		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r 94]			PENT,3DNOW,SQ
PFMUL		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r b4]			PENT,3DNOW,SQ
PFRCP		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r 96]			PENT,3DNOW,SQ
PFRCPIT1	mmxreg,mmxrm			[rm:	o64nw 0f 0f /r a6]			PENT,3DNOW,SQ
PFRCPIT2	mmxreg,mmxrm			[rm:	o64nw 0f 0f /r b6]			PENT,3DNOW,SQ
PFRSQIT1	mmxreg,mmxrm			[rm:	o64nw 0f 0f /r a7]			PENT,3DNOW,SQ
PFRSQRT		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r 97]			PENT,3DNOW,SQ
PFSUB		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r 9a]			PENT,3DNOW,SQ
PFSUBR		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r aa]			PENT,3DNOW,SQ
PI2FD		mmxreg,mmxrm			[rm:	o64nw 0f 0f /r 0d]			PENT,3DNOW,SQ
PMACHRIW	mmxreg,mem			[rm:	0f 5e /r]				PENT,MMX,SM,CYRIX
PMADDWD		mmxreg,mmxrm			[rm:	np o64nw 0f f5 /r]			PENT,MMX,SQ
PMAGW		mmxreg,mmxrm			[rm:	o64nw 0f 52 /r]				PENT,MMX,SQ,CYRIX
PMULHRIW	mmxreg,mmxrm			[rm:	o64nw 0f 5d /r]				PENT,MMX,SQ,CYRIX
PMULHRWA	mmxreg,mmxrm			[rm:	o64nw 0f 0f /r b7]			PENT,3DNOW,SQ
PMULHRWC	mmxreg,mmxrm			[rm:	o64nw 0f 59 /r]				PENT,MMX,SQ,CYRIX
PMULHW		mmxreg,mmxrm			[rm:	np o64nw 0f e5 /r]			PENT,MMX,SQ
PMULLW		mmxreg,mmxrm			[rm:	np o64nw 0f d5 /r]			PENT,MMX,SQ
PMVGEZB		mmxreg,mem			[rm:	0f 5c /r]				PENT,MMX,SQ,CYRIX
PMVLZB		mmxreg,mem			[rm:	0f 5b /r]				PENT,MMX,SQ,CYRIX
PMVNZB		mmxreg,mem			[rm:	0f 5a /r]				PENT,MMX,SQ,CYRIX
PMVZB		mmxreg,mem			[rm:	0f 58 /r]				PENT,MMX,SQ,CYRIX
POP		reg16				[r:	o16 58+r]				8086
POP		reg32				[r:	o32 58+r]				386,NOLONG
POP		reg64				[r:	o64nw 58+r]				X64
POP		rm16				[m:	o16 8f /0]				8086
POP		rm32				[m:	o32 8f /0]				386,NOLONG
POP		rm64				[m:	o64nw 8f /0]				X64
POP		reg_es				[-:	07]					8086,NOLONG
POP		reg_cs				[-:	0f]					8086,UNDOC,ND,OBSOLETE
POP		reg_ss				[-:	17]					8086,NOLONG
POP		reg_ds				[-:	1f]					8086,NOLONG
POP		reg_fs				[-:	0f a1]					386
POP		reg_gs				[-:	0f a9]					386
POPA		void				[	odf 61]					186,NOLONG
POPAD		void				[	o32 61]					386,NOLONG
POPAW		void				[	o16 61]					186,NOLONG
POPF		void				[	odf 9d]					8086
POPFD		void				[	o32 9d]					386,NOLONG
POPFQ		void				[	o32 9d]					X64
POPFW		void				[	o16 9d]					8086
POR		mmxreg,mmxrm			[rm:	np o64nw 0f eb /r]			PENT,MMX,SQ
PREFETCH	mem				[m:	0f 0d /0]				PENT,3DNOW,SQ
PREFETCHW	mem				[m:	0f 0d /1]				PENT,3DNOW,SQ
PSLLD		mmxreg,mmxrm			[rm:	np o64nw 0f f2 /r]			PENT,MMX,SQ
PSLLD		mmxreg,imm			[mi:	np 0f 72 /6 ib,u]			PENT,MMX
PSLLQ		mmxreg,mmxrm			[rm:	np o64nw 0f f3 /r]			PENT,MMX,SQ
PSLLQ		mmxreg,imm			[mi:	np 0f 73 /6 ib,u]			PENT,MMX
PSLLW		mmxreg,mmxrm			[rm:	np o64nw 0f f1 /r]			PENT,MMX,SQ
PSLLW		mmxreg,imm			[mi:	np 0f 71 /6 ib,u]			PENT,MMX
PSRAD		mmxreg,mmxrm			[rm:	np o64nw 0f e2 /r]			PENT,MMX,SQ
PSRAD		mmxreg,imm			[mi:	np 0f 72 /4 ib,u]			PENT,MMX
PSRAW		mmxreg,mmxrm			[rm:	np o64nw 0f e1 /r]			PENT,MMX,SQ
PSRAW		mmxreg,imm			[mi:	np 0f 71 /4 ib,u]			PENT,MMX
PSRLD		mmxreg,mmxrm			[rm:	np o64nw 0f d2 /r]			PENT,MMX,SQ
PSRLD		mmxreg,imm			[mi:	np 0f 72 /2 ib,u]			PENT,MMX
PSRLQ		mmxreg,mmxrm			[rm:	np o64nw 0f d3 /r]			PENT,MMX,SQ
PSRLQ		mmxreg,imm			[mi:	np 0f 73 /2 ib,u]			PENT,MMX
PSRLW		mmxreg,mmxrm			[rm:	np o64nw 0f d1 /r]			PENT,MMX,SQ
PSRLW		mmxreg,imm			[mi:	np 0f 71 /2 ib,u]			PENT,MMX
PSUBB		mmxreg,mmxrm			[rm:	np o64nw 0f f8 /r]			PENT,MMX,SQ
PSUBD		mmxreg,mmxrm			[rm:	np o64nw 0f fa /r]			PENT,MMX,SQ
PSUBSB		mmxreg,mmxrm			[rm:	np o64nw 0f e8 /r]			PENT,MMX,SQ
PSUBSIW		mmxreg,mmxrm			[rm:	o64nw 0f 55 /r]				PENT,MMX,SQ,CYRIX
PSUBSW		mmxreg,mmxrm			[rm:	np o64nw 0f e9 /r]			PENT,MMX,SQ
PSUBUSB		mmxreg,mmxrm			[rm:	np o64nw 0f d8 /r]			PENT,MMX,SQ
PSUBUSW		mmxreg,mmxrm			[rm:	np o64nw 0f d9 /r]			PENT,MMX,SQ
PSUBW		mmxreg,mmxrm			[rm:	np o64nw 0f f9 /r]			PENT,MMX,SQ
PUNPCKHBW	mmxreg,mmxrm			[rm:	np o64nw 0f 68 /r]			PENT,MMX,SQ
PUNPCKHDQ	mmxreg,mmxrm			[rm:	np o64nw 0f 6a /r]			PENT,MMX,SQ
PUNPCKHWD	mmxreg,mmxrm			[rm:	np o64nw 0f 69 /r]			PENT,MMX,SQ
PUNPCKLBW	mmxreg,mmxrm			[rm:	np o64nw 0f 60 /r]			PENT,MMX,SQ
PUNPCKLDQ	mmxreg,mmxrm			[rm:	np o64nw 0f 62 /r]			PENT,MMX,SQ
PUNPCKLWD	mmxreg,mmxrm			[rm:	np o64nw 0f 61 /r]			PENT,MMX,SQ
PUSH		reg16				[r:	o16 50+r]				8086
PUSH		reg32				[r:	o32 50+r]				386,NOLONG
PUSH		reg64				[r:	o64nw 50+r]				X64
PUSH		rm16				[m:	o16 ff /6]				8086
PUSH		rm32				[m:	o32 ff /6]				386,NOLONG
PUSH		rm64				[m:	o64nw ff /6]				X64
PUSH		reg_es				[-:	06]					8086,NOLONG
PUSH		reg_cs				[-:	0e]					8086,NOLONG
PUSH		reg_ss				[-:	16]					8086,NOLONG
PUSH		reg_ds				[-:	1e]					8086,NOLONG
PUSH		reg_fs				[-:	0f a0]					386
PUSH		reg_gs				[-:	0f a8]					386
PUSH		imm8				[i:	6a ib,s]					186
PUSH		sbyteword16			[i:	o16 6a ib,s]				186,AR0,SIZE,ND
PUSH		imm16				[i:	o16 68 iw]				186,AR0,SIZE
PUSH		sbytedword32			[i:	o32 6a ib,s]				386,NOLONG,AR0,SIZE,ND
PUSH		imm32				[i:	o32 68 id]				386,NOLONG,AR0,SIZE
PUSH		sbytedword32			[i:	o32 6a ib,s]				386,NOLONG,SD,ND
PUSH		imm32				[i:	o32 68 id]				386,NOLONG,SD
PUSH		sbytedword64			[i:	o64nw 6a ib,s]				X64,AR0,SIZE,ND
PUSH		imm64				[i:	o64nw 68 id,s]				X64,AR0,SIZE
PUSH		sbytedword32			[i:	o64nw 6a ib,s]				X64,AR0,SIZE,ND
PUSH		imm32				[i:	o64nw 68 id,s]				X64,AR0,SIZE
PUSHA		void				[	odf 60]					186,NOLONG
PUSHAD		void				[	o32 60]					386,NOLONG
PUSHAW		void				[	o16 60]					186,NOLONG
PUSHF		void				[	odf 9c]					8086
PUSHFD		void				[	o32 9c]					386,NOLONG
PUSHFQ		void				[	o32 9c]					X64
PUSHFW		void				[	o16 9c]					8086
PXOR		mmxreg,mmxrm			[rm:	np o64nw 0f ef /r]			PENT,MMX,SQ
RCL		rm8,unity			[m-:	d0 /2]					8086
RCL		rm8,reg_cl			[m-:	d2 /2]					8086
RCL		rm8,imm8			[mi:	c0 /2 ib,u]				186
RCL		rm16,unity			[m-:	o16 d1 /2]				8086
RCL		rm16,reg_cl			[m-:	o16 d3 /2]				8086
RCL		rm16,imm8			[mi:	o16 c1 /2 ib,u]				186
RCL		rm32,unity			[m-:	o32 d1 /2]				386
RCL		rm32,reg_cl			[m-:	o32 d3 /2]				386
RCL		rm32,imm8			[mi:	o32 c1 /2 ib,u]				386
RCL		rm64,unity			[m-:	o64 d1 /2]				X64
RCL		rm64,reg_cl			[m-:	o64 d3 /2]				X64
RCL		rm64,imm8			[mi:	o64 c1 /2 ib,u]				X64
RCR		rm8,unity			[m-:	d0 /3]					8086
RCR		rm8,reg_cl			[m-:	d2 /3]					8086
RCR		rm8,imm8			[mi:	c0 /3 ib,u]				186
RCR		rm16,unity			[m-:	o16 d1 /3]				8086
RCR		rm16,reg_cl			[m-:	o16 d3 /3]				8086
RCR		rm16,imm8			[mi:	o16 c1 /3 ib,u]				186
RCR		rm32,unity			[m-:	o32 d1 /3]				386
RCR		rm32,reg_cl			[m-:	o32 d3 /3]				386
RCR		rm32,imm8			[mi:	o32 c1 /3 ib,u]				386
RCR		rm64,unity			[m-:	o64 d1 /3]				X64
RCR		rm64,reg_cl			[m-:	o64 d3 /3]				X64
RCR		rm64,imm8			[mi:	o64 c1 /3 ib,u]				X64
RDSHR		rm32				[m:	o32 0f 36 /0]				P6,CYRIX,SMM
RDMSR		void				[	0f 32]					PENT,PRIV
RDPMC		void				[	0f 33]					P6
RDTSC		void				[	0f 31]					PENT
RDTSCP		void				[	0f 01 f9]				X86_64
RET		void				[	c3]					8086,BND
RET		imm				[i:	c2 iw]					8086,SW,BND
RETF		void				[	cb]					8086
RETF		imm				[i:	ca iw]					8086,SW
RETN		void				[	c3]					8086,BND
RETN		imm				[i:	c2 iw]					8086,SW,BND

ROL		rm8,unity			[m-:	d0 /0]					8086
ROL		rm8,reg_cl			[m-:	d2 /0]					8086
ROL		rm8,imm8			[mi:	c0 /0 ib,u]				186
ROL		rm16,unity			[m-:	o16 d1 /0]				8086
ROL		rm16,reg_cl			[m-:	o16 d3 /0]				8086
ROL		rm16,imm8			[mi:	o16 c1 /0 ib,u]				186
ROL		rm32,unity			[m-:	o32 d1 /0]				386
ROL		rm32,reg_cl			[m-:	o32 d3 /0]				386
ROL		rm32,imm8			[mi:	o32 c1 /0 ib,u]				386
ROL		rm64,unity			[m-:	o64 d1 /0]				X64
ROL		rm64,reg_cl			[m-:	o64 d3 /0]				X64
ROL		rm64,imm8			[mi:	o64 c1 /0 ib,u]				X64
ROR		rm8,unity			[m-:	d0 /1]					8086
ROR		rm8,reg_cl			[m-:	d2 /1]					8086
ROR		rm8,imm8			[mi:	c0 /1 ib,u]				186
ROR		rm16,unity			[m-:	o16 d1 /1]				8086
ROR		rm16,reg_cl			[m-:	o16 d3 /1]				8086
ROR		rm16,imm8			[mi:	o16 c1 /1 ib,u]				186
ROR		rm32,unity			[m-:	o32 d1 /1]				386
ROR		rm32,reg_cl			[m-:	o32 d3 /1]				386
ROR		rm32,imm8			[mi:	o32 c1 /1 ib,u]				386
ROR		rm64,unity			[m-:	o64 d1 /1]				X64
ROR		rm64,reg_cl			[m-:	o64 d3 /1]				X64
ROR		rm64,imm8			[mi:	o64 c1 /1 ib,u]				X64
RDM		void				[	0f 3a]					P6,CYRIX,ND
RSDC		reg_sreg,mem80			[rm:	0f 79 /r]				486,CYRIX,SMM
RSLDT		mem80				[m:	0f 7b /0]				486,CYRIX,SMM
RSM		void				[	0f aa]					PENT,SMM
RSTS		mem80				[m:	0f 7d /0]				486,CYRIX,SMM
SAHF		void				[	9e]					8086
SAL		rm8,unity			[m-:	d0 /4]					8086,ND
SAL		rm8,reg_cl			[m-:	d2 /4]					8086,ND
SAL		rm8,imm8			[mi:	c0 /4 ib,u]				186,ND
SAL		rm16,unity			[m-:	o16 d1 /4]				8086,ND
SAL		rm16,reg_cl			[m-:	o16 d3 /4]				8086,ND
SAL		rm16,imm8			[mi:	o16 c1 /4 ib,u]				186,ND
SAL		rm32,unity			[m-:	o32 d1 /4]				386,ND
SAL		rm32,reg_cl			[m-:	o32 d3 /4]				386,ND
SAL		rm32,imm8			[mi:	o32 c1 /4 ib,u]				386,ND
SAL		rm64,unity			[m-:	o64 d1 /4]				X64,ND
SAL		rm64,reg_cl			[m-:	o64 d3 /4]				X64,ND
SAL		rm64,imm8			[mi:	o64 c1 /4 ib,u]				X64,ND
SALC		void				[	d6]					8086,UNDOC
SAR		rm8,unity			[m-:	d0 /7]					8086
SAR		rm8,reg_cl			[m-:	d2 /7]					8086
SAR		rm8,imm8			[mi:	c0 /7 ib,u]				186
SAR		rm16,unity			[m-:	o16 d1 /7]				8086
SAR		rm16,reg_cl			[m-:	o16 d3 /7]				8086
SAR		rm16,imm8			[mi:	o16 c1 /7 ib,u]				186
SAR		rm32,unity			[m-:	o32 d1 /7]				386
SAR		rm32,reg_cl			[m-:	o32 d3 /7]				386
SAR		rm32,imm8			[mi:	o32 c1 /7 ib,u]				386
SAR		rm64,unity			[m-:	o64 d1 /7]				X64
SAR		rm64,reg_cl			[m-:	o64 d3 /7]				X64
SAR		rm64,imm8			[mi:	o64 c1 /7 ib,u]				X64
SBB		mem,reg8			[mr:	hle 18 /r]				8086,SM,LOCK
SBB		reg8,reg8			[mr:	18 /r]					8086
SBB		mem,reg16			[mr:	hle o16 19 /r]				8086,SM,LOCK
SBB		reg16,reg16			[mr:	o16 19 /r]				8086
SBB		mem,reg32			[mr:	hle o32 19 /r]				386,SM,LOCK
SBB		reg32,reg32			[mr:	o32 19 /r]				386
SBB		mem,reg64			[mr:	hle o64 19 /r]				X64,SM,LOCK
SBB		reg64,reg64			[mr:	o64 19 /r]				X64
SBB		reg8,mem			[rm:	1a /r]					8086,SM
SBB		reg8,reg8			[rm:	1a /r]					8086
SBB		reg16,mem			[rm:	o16 1b /r]				8086,SM
SBB		reg16,reg16			[rm:	o16 1b /r]				8086
SBB		reg32,mem			[rm:	o32 1b /r]				386,SM
SBB		reg32,reg32			[rm:	o32 1b /r]				386
SBB		reg64,mem			[rm:	o64 1b /r]				X64,SM
SBB		reg64,reg64			[rm:	o64 1b /r]				X64
SBB		rm16,imm8			[mi:	hle o16 83 /3 ib,s]			8086,LOCK
SBB		rm32,imm8			[mi:	hle o32 83 /3 ib,s]			386,LOCK
SBB		rm64,imm8			[mi:	hle o64 83 /3 ib,s]			X64,LOCK
SBB		reg_al,imm			[-i:	1c ib]					8086,SM
SBB		reg_ax,sbyteword		[mi:	o16 83 /3 ib,s]				8086,SM,ND
SBB		reg_ax,imm			[-i:	o16 1d iw]				8086,SM
SBB		reg_eax,sbytedword		[mi:	o32 83 /3 ib,s]				386,SM,ND
SBB		reg_eax,imm			[-i:	o32 1d id]				386,SM
SBB		reg_rax,sbytedword		[mi:	o64 83 /3 ib,s]				X64,SM,ND
SBB		reg_rax,imm			[-i:	o64 1d id,s]				X64,SM
SBB		rm8,imm				[mi:	hle 80 /3 ib]				8086,SM,LOCK
SBB		rm16,sbyteword			[mi:	hle o16 83 /3 ib,s]			8086,SM,LOCK,ND
SBB		rm16,imm			[mi:	hle o16 81 /3 iw]			8086,SM,LOCK
SBB		rm32,sbytedword			[mi:	hle o32 83 /3 ib,s]			386,SM,LOCK,ND
SBB		rm32,imm			[mi:	hle o32 81 /3 id]			386,SM,LOCK
SBB		rm64,sbytedword			[mi:	hle o64 83 /3 ib,s]			X64,SM,LOCK,ND
SBB		rm64,imm			[mi:	hle o64 81 /3 id,s]			X64,SM,LOCK
SBB		mem,imm8			[mi:	hle 80 /3 ib]				8086,SM,LOCK
SBB		mem,sbyteword16			[mi:	hle o16 83 /3 ib,s]			8086,SM,LOCK,ND
SBB		mem,imm16			[mi:	hle o16 81 /3 iw]			8086,SM,LOCK
SBB		mem,sbytedword32		[mi:	hle o32 83 /3 ib,s]			386,SM,LOCK,ND
SBB		mem,imm32			[mi:	hle o32 81 /3 id]			386,SM,LOCK
SBB		rm8,imm				[mi:	hle 82 /3 ib]				8086,SM,LOCK,ND,NOLONG
SCASB		void				[	repe ae]				8086
SCASD		void				[	repe o32 af]				386
SCASQ		void				[	repe o64 af]				X64
SCASW		void				[	repe o16 af]				8086
SFENCE		void				[	np 0f ae f8]				X64,AMD
SGDT		mem				[m:	0f 01 /0]				286
SHL		rm8,unity			[m-:	d0 /4]					8086
SHL		rm8,reg_cl			[m-:	d2 /4]					8086
SHL		rm8,imm8			[mi:	c0 /4 ib,u]				186
SHL		rm16,unity			[m-:	o16 d1 /4]				8086
SHL		rm16,reg_cl			[m-:	o16 d3 /4]				8086
SHL		rm16,imm8			[mi:	o16 c1 /4 ib,u]				186
SHL		rm32,unity			[m-:	o32 d1 /4]				386
SHL		rm32,reg_cl			[m-:	o32 d3 /4]				386
SHL		rm32,imm8			[mi:	o32 c1 /4 ib,u]				386
SHL		rm64,unity			[m-:	o64 d1 /4]				X64
SHL		rm64,reg_cl			[m-:	o64 d3 /4]				X64
SHL		rm64,imm8			[mi:	o64 c1 /4 ib,u]				X64
SHLD		mem,reg16,imm			[mri:	o16 0f a4 /r ib,u]			386,SM2,SB,AR2
SHLD		reg16,reg16,imm			[mri:	o16 0f a4 /r ib,u]			386,SM2,SB,AR2
SHLD		mem,reg32,imm			[mri:	o32 0f a4 /r ib,u]			386,SM2,SB,AR2
SHLD		reg32,reg32,imm			[mri:	o32 0f a4 /r ib,u]			386,SM2,SB,AR2
SHLD		mem,reg64,imm			[mri:	o64 0f a4 /r ib,u]			X64,SM2,SB,AR2
SHLD		reg64,reg64,imm			[mri:	o64 0f a4 /r ib,u]			X64,SM2,SB,AR2
SHLD		mem,reg16,reg_cl		[mr-:	o16 0f a5 /r]				386,SM
SHLD		reg16,reg16,reg_cl		[mr-:	o16 0f a5 /r]				386
SHLD		mem,reg32,reg_cl		[mr-:	o32 0f a5 /r]				386,SM
SHLD		reg32,reg32,reg_cl		[mr-:	o32 0f a5 /r]				386
SHLD		mem,reg64,reg_cl		[mr-:	o64 0f a5 /r]				X64,SM
SHLD		reg64,reg64,reg_cl		[mr-:	o64 0f a5 /r]				X64
SHR		rm8,unity			[m-:	d0 /5]					8086
SHR		rm8,reg_cl			[m-:	d2 /5]					8086
SHR		rm8,imm8			[mi:	c0 /5 ib,u]				186
SHR		rm16,unity			[m-:	o16 d1 /5]				8086
SHR		rm16,reg_cl			[m-:	o16 d3 /5]				8086
SHR		rm16,imm8			[mi:	o16 c1 /5 ib,u]				186
SHR		rm32,unity			[m-:	o32 d1 /5]				386
SHR		rm32,reg_cl			[m-:	o32 d3 /5]				386
SHR		rm32,imm8			[mi:	o32 c1 /5 ib,u]				386
SHR		rm64,unity			[m-:	o64 d1 /5]				X64
SHR		rm64,reg_cl			[m-:	o64 d3 /5]				X64
SHR		rm64,imm8			[mi:	o64 c1 /5 ib,u]				X64
SHRD		mem,reg16,imm			[mri:	o16 0f ac /r ib,u]			386,SM2,SB,AR2
SHRD		reg16,reg16,imm			[mri:	o16 0f ac /r ib,u]			386,SM2,SB,AR2
SHRD		mem,reg32,imm			[mri:	o32 0f ac /r ib,u]			386,SM2,SB,AR2
SHRD		reg32,reg32,imm			[mri:	o32 0f ac /r ib,u]			386,SM2,SB,AR2
SHRD		mem,reg64,imm			[mri:	o64 0f ac /r ib,u]			X64,SM2,SB,AR2
SHRD		reg64,reg64,imm			[mri:	o64 0f ac /r ib,u]			X64,SM2,SB,AR2
SHRD		mem,reg16,reg_cl		[mr-:	o16 0f ad /r]				386,SM
SHRD		reg16,reg16,reg_cl		[mr-:	o16 0f ad /r]				386
SHRD		mem,reg32,reg_cl		[mr-:	o32 0f ad /r]				386,SM
SHRD		reg32,reg32,reg_cl		[mr-:	o32 0f ad /r]				386
SHRD		mem,reg64,reg_cl		[mr-:	o64 0f ad /r]				X64,SM
SHRD		reg64,reg64,reg_cl		[mr-:	o64 0f ad /r]				X64
SIDT		mem				[m:	0f 01 /1]				286
SLDT		mem				[m:	0f 00 /0]				286
SLDT		mem16				[m:	0f 00 /0]				286
SLDT		reg16				[m:	o16 0f 00 /0]				286
SLDT		reg32				[m:	o32 0f 00 /0]				386
SLDT		reg64				[m:	o64nw 0f 00 /0]				X64,ND
SLDT		reg64				[m:	o64 0f 00 /0]				X64
SKINIT		void				[	0f 01 de]				X64
SMI		void				[	f1]					386,UNDOC
SMINT		void				[	0f 38]					P6,CYRIX,ND
; Older Cyrix chips had this; they had to move due to conflict with MMX
SMINTOLD	void				[	0f 7e]					486,CYRIX,ND,OBSOLETE
SMSW		mem				[m:	0f 01 /4]				286
SMSW		mem16				[m:	0f 01 /4]				286
SMSW		reg16				[m:	o16 0f 01 /4]				286
SMSW		reg32				[m:	o32 0f 01 /4]				386
SMSW		reg64				[m:	o64 0f 01 /4]				X64
STC		void				[	f9]					8086
STD		void				[	fd]					8086
STI		void				[	fb]					8086
STOSB		void				[	aa]					8086
STOSD		void				[	o32 ab]					386
STOSQ		void				[	o64 ab]					X64
STOSW		void				[	o16 ab]					8086
STR		mem				[m:	0f 00 /1]				286,PROT
STR		mem16				[m:	0f 00 /1]				286,PROT
STR		reg16				[m:	o16 0f 00 /1]				286,PROT
STR		reg32				[m:	o32 0f 00 /1]				386,PROT
STR		reg64				[m:	o64 0f 00 /1]				X64
SUB		mem,reg8			[mr:	hle 28 /r]				8086,SM,LOCK
SUB		reg8,reg8			[mr:	28 /r]					8086
SUB		mem,reg16			[mr:	hle o16 29 /r]				8086,SM,LOCK
SUB		reg16,reg16			[mr:	o16 29 /r]				8086
SUB		mem,reg32			[mr:	hle o32 29 /r]				386,SM,LOCK
SUB		reg32,reg32			[mr:	o32 29 /r]				386
SUB		mem,reg64			[mr:	hle o64 29 /r]				X64,SM,LOCK
SUB		reg64,reg64			[mr:	o64 29 /r]				X64
SUB		reg8,mem			[rm:	2a /r]					8086,SM
SUB		reg8,reg8			[rm:	2a /r]					8086
SUB		reg16,mem			[rm:	o16 2b /r]				8086,SM
SUB		reg16,reg16			[rm:	o16 2b /r]				8086
SUB		reg32,mem			[rm:	o32 2b /r]				386,SM
SUB		reg32,reg32			[rm:	o32 2b /r]				386
SUB		reg64,mem			[rm:	o64 2b /r]				X64,SM
SUB		reg64,reg64			[rm:	o64 2b /r]				X64
SUB		rm16,imm8			[mi:	hle o16 83 /5 ib,s]			8086,LOCK
SUB		rm32,imm8			[mi:	hle o32 83 /5 ib,s]			386,LOCK
SUB		rm64,imm8			[mi:	hle o64 83 /5 ib,s]			X64,LOCK
SUB		reg_al,imm			[-i:	2c ib]					8086,SM
SUB		reg_ax,sbyteword		[mi:	o16 83 /5 ib,s]				8086,SM,ND
SUB		reg_ax,imm			[-i:	o16 2d iw]				8086,SM
SUB		reg_eax,sbytedword		[mi:	o32 83 /5 ib,s]				386,SM,ND
SUB		reg_eax,imm			[-i:	o32 2d id]				386,SM
SUB		reg_rax,sbytedword		[mi:	o64 83 /5 ib,s]				X64,SM,ND
SUB		reg_rax,imm			[-i:	o64 2d id,s]				X64,SM
SUB		rm8,imm				[mi:	hle 80 /5 ib]				8086,SM,LOCK
SUB		rm16,sbyteword			[mi:	hle o16 83 /5 ib,s]			8086,SM,LOCK,ND
SUB		rm16,imm			[mi:	hle o16 81 /5 iw]			8086,SM,LOCK
SUB		rm32,sbytedword			[mi:	hle o32 83 /5 ib,s]			386,SM,LOCK,ND
SUB		rm32,imm			[mi:	hle o32 81 /5 id]			386,SM,LOCK
SUB		rm64,sbytedword			[mi:	hle o64 83 /5 ib,s]			X64,SM,LOCK,ND
SUB		rm64,imm			[mi:	hle o64 81 /5 id,s]			X64,SM,LOCK
SUB		mem,imm8			[mi:	hle 80 /5 ib]				8086,SM,LOCK
SUB		mem,sbyteword16			[mi:	hle o16 83 /5 ib,s]			8086,SM,LOCK,ND
SUB		mem,imm16			[mi:	hle o16 81 /5 iw]			8086,SM,LOCK
SUB		mem,sbytedword32		[mi:	hle o32 83 /5 ib,s]			386,SM,LOCK,ND
SUB		mem,imm32			[mi:	hle o32 81 /5 id]			386,SM,LOCK
SUB		rm8,imm				[mi:	hle 82 /5 ib]				8086,SM,LOCK,ND,NOLONG
SVDC		mem80,reg_sreg			[mr:	0f 78 /r]				486,CYRIX,SMM
SVLDT		mem80				[m:	0f 7a /0]				486,CYRIX,SMM,ND
SVTS		mem80				[m:	0f 7c /0]				486,CYRIX,SMM
SWAPGS		void				[	0f 01 f8]				X64
SYSCALL		void				[	0f 05]					P6,AMD
SYSENTER	void				[	0f 34]					P6
SYSEXIT		void				[	0f 35]					P6,PRIV
SYSRET		void				[	0f 07]					P6,PRIV,AMD
TEST		mem,reg8			[mr:	84 /r]					8086,SM
TEST		reg8,reg8			[mr:	84 /r]					8086
TEST		mem,reg16			[mr:	o16 85 /r]				8086,SM
TEST		reg16,reg16			[mr:	o16 85 /r]				8086
TEST		mem,reg32			[mr:	o32 85 /r]				386,SM
TEST		reg32,reg32			[mr:	o32 85 /r]				386
TEST		mem,reg64			[mr:	o64 85 /r]				X64,SM
TEST		reg64,reg64			[mr:	o64 85 /r]				X64
TEST		reg8,mem			[rm:	84 /r]					8086,SM
TEST		reg16,mem			[rm:	o16 85 /r]				8086,SM
TEST		reg32,mem			[rm:	o32 85 /r]				386,SM
TEST		reg64,mem			[rm:	o64 85 /r]				X64,SM
TEST		reg_al,imm			[-i:	a8 ib]					8086,SM
TEST		reg_ax,imm			[-i:	o16 a9 iw]				8086,SM
TEST		reg_eax,imm			[-i:	o32 a9 id]				386,SM
TEST		reg_rax,imm			[-i:	o64 a9 id,s]				X64,SM
TEST		rm8,imm				[mi:	f6 /0 ib]				8086,SM
TEST		rm16,imm			[mi:	o16 f7 /0 iw]				8086,SM
TEST		rm32,imm			[mi:	o32 f7 /0 id]				386,SM
TEST		rm64,imm			[mi:	o64 f7 /0 id,s]				X64,SM
TEST		mem,imm8			[mi:	f6 /0 ib]				8086,SM
TEST		mem,imm16			[mi:	o16 f7 /0 iw]				8086,SM
TEST		mem,imm32			[mi:	o32 f7 /0 id]				386,SM
UD0		void				[	0f ff]					186
UD1		reg,rm16			[rm:	o16 0f b9 /r]				186
UD1		reg,rm32			[rm:	o32 0f b9 /r]				186
UD1		reg,rm64			[rm:	o64 0f b9 /r]				186
UD1		void				[	0f b9]					186,ND
UD2B		void				[	0f b9]					186,ND
UD2B		reg,rm16			[rm:	o16 0f b9 /r]				186,ND
UD2B		reg,rm32			[rm:	o32 0f b9 /r]				186,ND
UD2B		reg,rm64			[rm:	o64 0f b9 /r]				186,ND
UD2		void				[	0f 0b]					186
UD2A		void				[	0f 0b]					186,ND
UMOV		mem,reg8			[mr:	np 0f 10 /r]				386,UNDOC,SM,ND
UMOV		reg8,reg8			[mr:	np 0f 10 /r]				386,UNDOC,ND
UMOV		mem,reg16			[mr:	np o16 0f 11 /r]			386,UNDOC,SM,ND
UMOV		reg16,reg16			[mr:	np o16 0f 11 /r]			386,UNDOC,ND
UMOV		mem,reg32			[mr:	np o32 0f 11 /r]			386,UNDOC,SM,ND
UMOV		reg32,reg32			[mr:	np o32 0f 11 /r]			386,UNDOC,ND
UMOV		reg8,mem			[rm:	np 0f 12 /r]				386,UNDOC,SM,ND
UMOV		reg8,reg8			[rm:	np 0f 12 /r]				386,UNDOC,ND
UMOV		reg16,mem			[rm:	np o16 0f 13 /r]			386,UNDOC,SM,ND
UMOV		reg16,reg16			[rm:	np o16 0f 13 /r]			386,UNDOC,ND
UMOV		reg32,mem			[rm:	np o32 0f 13 /r]			386,UNDOC,SM,ND
UMOV		reg32,reg32			[rm:	np o32 0f 13 /r]			386,UNDOC,ND
VERR		mem				[m:	0f 00 /4]				286,PROT
VERR		mem16				[m:	0f 00 /4]				286,PROT
VERR		reg16				[m:	0f 00 /4]				286,PROT
VERW		mem				[m:	0f 00 /5]				286,PROT
VERW		mem16				[m:	0f 00 /5]				286,PROT
VERW		reg16				[m:	0f 00 /5]				286,PROT
FWAIT		void				[	wait]					8086
WBINVD		void				[	0f 09]					486,PRIV
WRSHR		rm32				[m:	o32 0f 37 /0]				P6,CYRIX,SMM
WRMSR		void				[	0f 30]					PENT,PRIV
XADD		mem,reg8			[mr:	hle 0f c0 /r]				486,SM,LOCK
XADD		reg8,reg8			[mr:	0f c0 /r]				486
XADD		mem,reg16			[mr:	hle o16 0f c1 /r]			486,SM,LOCK
XADD		reg16,reg16			[mr:	o16 0f c1 /r]				486
XADD		mem,reg32			[mr:	hle o32 0f c1 /r]			486,SM,LOCK
XADD		reg32,reg32			[mr:	o32 0f c1 /r]				486
XADD		mem,reg64			[mr:	hle o64 0f c1 /r]			X64,SM,LOCK
XADD		reg64,reg64			[mr:	o64 0f c1 /r]				X64
XBTS		reg16,mem			[rm:	o16 0f a6 /r]				386,SW,UNDOC,ND
XBTS		reg16,reg16			[rm:	o16 0f a6 /r]				386,UNDOC,ND
XBTS		reg32,mem			[rm:	o32 0f a6 /r]				386,SD,UNDOC,ND
XBTS		reg32,reg32			[rm:	o32 0f a6 /r]				386,UNDOC,ND
XCHG		reg_ax,reg16			[-r:	o16 90+r]				8086
XCHG		reg_eax,reg32na			[-r:	o32 90+r]				386
XCHG		reg_rax,reg64			[-r:	o64 90+r]				X64
XCHG		reg16,reg_ax			[r-:	o16 90+r]				8086
XCHG		reg32na,reg_eax			[r-:	o32 90+r]				386
XCHG		reg64,reg_rax			[r-:	o64 90+r]				X64
; This must be NOLONG since opcode 90 is NOP, and in 64-bit mode
; "xchg eax,eax" is *not* a NOP.
XCHG		reg_eax,reg_eax			[--:	o32 90]					386,NOLONG
XCHG		reg8,mem			[rm:	hlenl 86 /r]				8086,SM,LOCK
XCHG		reg8,reg8			[rm:	86 /r]					8086
XCHG		reg16,mem			[rm:	hlenl o16 87 /r]			8086,SM,LOCK
XCHG		reg16,reg16			[rm:	o16 87 /r]				8086
XCHG		reg32,mem			[rm:	hlenl o32 87 /r]			386,SM,LOCK
XCHG		reg32,reg32			[rm:	o32 87 /r]				386
XCHG		reg64,mem			[rm:	hlenl o64 87 /r]			X64,SM,LOCK
XCHG		reg64,reg64			[rm:	o64 87 /r]				X64
XCHG		mem,reg8			[mr:	hlenl 86 /r]				8086,SM,LOCK
XCHG		reg8,reg8			[mr:	86 /r]					8086
XCHG		mem,reg16			[mr:	hlenl o16 87 /r]			8086,SM,LOCK
XCHG		reg16,reg16			[mr:	o16 87 /r]				8086
XCHG		mem,reg32			[mr:	hlenl o32 87 /r]			386,SM,LOCK
XCHG		reg32,reg32			[mr:	o32 87 /r]				386
XCHG		mem,reg64			[mr:	hlenl o64 87 /r]			X64,SM,LOCK
XCHG		reg64,reg64			[mr:	o64 87 /r]				X64
XLATB		void				[	d7]					8086
XLAT		void				[	d7]					8086
XOR		mem,reg8			[mr:	hle 30 /r]				8086,SM,LOCK
XOR		reg8,reg8			[mr:	30 /r]					8086
XOR		mem,reg16			[mr:	hle o16 31 /r]				8086,SM,LOCK
XOR		reg16,reg16			[mr:	o16 31 /r]				8086
XOR		mem,reg32			[mr:	hle o32 31 /r]				386,SM,LOCK
XOR		reg32,reg32			[mr:	o32 31 /r]				386
XOR		mem,reg64			[mr:	hle o64 31 /r]				X64,SM,LOCK
XOR		reg64,reg64			[mr:	o64 31 /r]				X64
XOR		reg8,mem			[rm:	32 /r]					8086,SM
XOR		reg8,reg8			[rm:	32 /r]					8086
XOR		reg16,mem			[rm:	o16 33 /r]				8086,SM
XOR		reg16,reg16			[rm:	o16 33 /r]				8086
XOR		reg32,mem			[rm:	o32 33 /r]				386,SM
XOR		reg32,reg32			[rm:	o32 33 /r]				386
XOR		reg64,mem			[rm:	o64 33 /r]				X64,SM
XOR		reg64,reg64			[rm:	o64 33 /r]				X64
XOR		rm16,imm8			[mi:	hle o16 83 /6 ib,s]			8086,LOCK
XOR		rm32,imm8			[mi:	hle o32 83 /6 ib,s]			386,LOCK
XOR		rm64,imm8			[mi:	hle o64 83 /6 ib,s]			X64,LOCK
XOR		reg_al,imm			[-i:	34 ib]					8086,SM
XOR		reg_ax,sbyteword		[mi:	o16 83 /6 ib,s]				8086,SM,ND
XOR		reg_ax,imm			[-i:	o16 35 iw]				8086,SM
XOR		reg_eax,sbytedword		[mi:	o32 83 /6 ib,s]				386,SM,ND
XOR		reg_eax,imm			[-i:	o32 35 id]				386,SM
XOR		reg_rax,sbytedword		[mi:	o64 83 /6 ib,s]				X64,SM,ND
XOR		reg_rax,imm			[-i:	o64 35 id,s]				X64,SM
XOR		rm8,imm				[mi:	hle 80 /6 ib]				8086,SM,LOCK
XOR		rm16,sbyteword			[mi:	hle o16 83 /6 ib,s]			8086,SM,LOCK,ND
XOR		rm16,imm			[mi:	hle o16 81 /6 iw]			8086,SM,LOCK
XOR		rm32,sbytedword			[mi:	hle o32 83 /6 ib,s]			386,SM,LOCK,ND
XOR		rm32,imm			[mi:	hle o32 81 /6 id]			386,SM,LOCK
XOR		rm64,sbytedword			[mi:	hle o64 83 /6 ib,s]			X64,SM,LOCK,ND
XOR		rm64,imm			[mi:	hle o64 81 /6 id,s]			X64,SM,LOCK
XOR		mem,imm8			[mi:	hle 80 /6 ib]				8086,SM,LOCK
XOR		mem,sbyteword16			[mi:	hle o16 83 /6 ib,s]			8086,SM,LOCK,ND
XOR		mem,imm16			[mi:	hle o16 81 /6 iw]			8086,SM,LOCK
XOR		mem,sbytedword32		[mi:	hle o32 83 /6 ib,s]			386,SM,LOCK,ND
XOR		mem,imm32			[mi:	hle o32 81 /6 id]			386,SM,LOCK
XOR		rm8,imm				[mi:	hle 82 /6 ib]				8086,SM,LOCK,ND,NOLONG
CMOVcc		reg16,mem			[rm:	o16 0f 40+c /r]				P6,SM
CMOVcc		reg16,reg16			[rm:	o16 0f 40+c /r]				P6
CMOVcc		reg32,mem			[rm:	o32 0f 40+c /r]				P6,SM
CMOVcc		reg32,reg32			[rm:	o32 0f 40+c /r]				P6
CMOVcc		reg64,mem			[rm:	o64 0f 40+c /r]				X64,SM
CMOVcc		reg64,reg64			[rm:	o64 0f 40+c /r]				X64
Jcc		imm|near			[i:	odf 0f 80+c rel]			386,BND
Jcc		imm16|near			[i:	o16 0f 80+c rel]			386,NOLONG,BND
Jcc		imm32|near			[i:	o32 0f 80+c rel]			386,NOLONG,BND
Jcc		imm64|near			[i:	o64nw 0f 80+c rel]			X64,BND
Jcc		imm|short			[i:	70+c rel8]				8086,ND,BND
Jcc		imm				[i:	jcc8 70+c rel8]				8086,ND,BND
Jcc		imm				[i:	0f 80+c rel]				386,ND,BND
Jcc		imm				[i:	71+c jlen e9 rel]			8086,ND,BND
Jcc		imm				[i:	70+c rel8]				8086,BND

SETcc		mem				[m:	0f 90+c /0]				386,SB
SETcc		reg8				[m:	0f 90+c /0]				386
